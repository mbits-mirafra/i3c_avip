//----------------------------------------------------------------------
//   Copyright 2013 Mentor Graphics Corporation
//   All Rights Reserved Worldwide
//
//   Licensed under the Apache License, Version 2.0 (the
//   "License"); you may not use this file except in
//   compliance with the License.  You may obtain a copy of
//   the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in
//   writing, software distributed under the License is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
//   CONDITIONS OF ANY KIND, either express or implied.  See
//   the License for the specific language governing
//   permissions and limitations under the License.
//----------------------------------------------------------------------

// Module: ace_master_hdl
//
// This module is the HDL-side master module for ACE. The user can connect
// an instance of it to an ACE bus to drive the bus for the master side.
// This module goes together with an HVL-side master module 'ace_master_hvl'.
// The two modules combined are a consolidation of 
// (1) the ACE QVIP interface and associated EZ-VIP master connectivity module
// (2) the ACE VTL interface and associated XRTL master module 
// into a unified pair of wrapper modules to provide a single common VIP 
// use model for simulation and emulation. 
//
// Input Parameters:
// ADDR_WIDTH       - Indicates address bus width.
// RDATA_WIDTH      - Indicates read data bus width.
// WDATA_WIDTH      - Indicates write data bus width.
// ID_WIDTH         - Indicates ID width.
// USER_WIDTH       - Indicates user signals bus width.
// REGION_MAP_SIZE  - Indicates region map size
// SNOOP_DATA_WIDTH - Indicates snoop signal width
// CACHE_LINE_SIZE  - Indicates cache line size
// VIP_IF_UVM_NAME  - Indicates interface name for which this module
//                    will be instantiated.
// VIP_IF_UVM_CTXT  - Indicates interface context for which this module
//                    will be instantiated.

// (inline source)
module mgc_ace_master_hdl #(
   int ADDR_WIDTH  = 64,
   int RDATA_WIDTH = 1024,
   int WDATA_WIDTH = 1024,
   int ID_WIDTH    = 30,
   int USER_WIDTH  = 4,
   int REGION_MAP_SIZE = 16,
   int SNOOP_DATA_WIDTH = 1024,
   int CACHE_LINE_SIZE = 7,
   string VIP_IF_UVM_NAME,
   string VIP_IF_UVM_CONTEXT,
   int snoop_data_channel_phase_BUFFER_MAX_ELEMENTS = 17, 
   int write_channel_phase_BUFFER_MAX_ELEMENTS = 17, 
   int BURST_BUFFER = 16,
   type PARAMS = int
)(mgc_ace_signal_if pin_if); //pragma attribute mgc_ace_master_hdl partition_module_xrtl

`ifdef XRTL

   //
   // Instantiate VTL XRTL BFM:
   //
   mgc_xrtl_ace_master #(
      .AXI4_ADDRESS_WIDTH(ADDR_WIDTH),
      .AXI4_RDATA_WIDTH(RDATA_WIDTH),
      .AXI4_WDATA_WIDTH(WDATA_WIDTH),
      .AXI4_ID_WIDTH(ID_WIDTH),
      .AXI4_USER_WIDTH(USER_WIDTH),
      .AXI4_REGION_MAP_SIZE(REGION_MAP_SIZE),
      .ACE_SNOOP_DATA_WIDTH(SNOOP_DATA_WIDTH),
      .ACE_CACHE_LINE_SIZE(CACHE_LINE_SIZE),
      .snoop_data_channel_phase_BUFFER_MAX_ELEMENTS(snoop_data_channel_phase_BUFFER_MAX_ELEMENTS),
      .write_channel_phase_BUFFER_MAX_ELEMENTS(write_channel_phase_BUFFER_MAX_ELEMENTS),
      .BURST_BUFFER(BURST_BUFFER)
   ) vip_mod (
      .ACVALID(pin_if.ACVALID),
      .ACREADY(pin_if.ACREADY),
      .ACADDR(pin_if.ACADDR),
      .ACSNOOP(pin_if.ACSNOOP),
      .ACPROT(pin_if.ACPROT),
      .CDVALID(pin_if.CDVALID),
      .CDREADY(pin_if.CDREADY),
      .CDDATA(pin_if.CDDATA),
      .CDLAST(pin_if.CDLAST),
      .CRVALID(pin_if.CRVALID),
      .CRREADY(pin_if.CRREADY),
      .CRRESP(pin_if.CRRESP),
      .ACLK(pin_if.ACLK),
      .ARESETn(pin_if.ARESETn),
      .AWVALID(pin_if.AWVALID),
      .AWADDR(pin_if.AWADDR),
      .AWPROT(pin_if.AWPROT),
      .AWREGION(pin_if.AWREGION),
      .AWLEN(pin_if.AWLEN),
      .AWSIZE(pin_if.AWSIZE),
      .AWBURST(pin_if.AWBURST),
      .AWLOCK(pin_if.AWLOCK),
      .AWCACHE(pin_if.AWCACHE),
      .AWQOS(pin_if.AWQOS),
      .AWID(pin_if.AWID),
      .AWUSER(pin_if.AWUSER),
      .AWDOMAIN(pin_if.AWDOMAIN),
      .AWSNOOP(pin_if.AWSNOOP),
      .AWBAR(pin_if.AWBAR),
      .ARDOMAIN(pin_if.ARDOMAIN),
      .ARSNOOP(pin_if.ARSNOOP),
      .ARBAR(pin_if.ARBAR),
      .RRESP(pin_if.RRESP),
      .RACK(pin_if.RACK),
      .WACK(pin_if.WACK),
      .AWREADY(pin_if.AWREADY),
      .ARVALID(pin_if.ARVALID),
      .ARADDR(pin_if.ARADDR),
      .ARPROT(pin_if.ARPROT),
      .ARREGION(pin_if.ARREGION),
      .ARLEN(pin_if.ARLEN),
      .ARSIZE(pin_if.ARSIZE),
      .ARBURST(pin_if.ARBURST),
      .ARLOCK(pin_if.ARLOCK),
      .ARCACHE(pin_if.ARCACHE),
      .ARQOS(pin_if.ARQOS),
      .ARID(pin_if.ARID),
      .ARUSER(pin_if.ARUSER),
      .ARREADY(pin_if.ARREADY),
      .RVALID(pin_if.RVALID),
      .RDATA(pin_if.RDATA),
      .RLAST(pin_if.RLAST),
      .RID(pin_if.RID),
      .RUSER(pin_if.RUSER),
      .RREADY(pin_if.RREADY),
      .WVALID(pin_if.WVALID),
      .WDATA(pin_if.WDATA),
      .WSTRB(pin_if.WSTRB),
      .WLAST(pin_if.WLAST),
      .WUSER(pin_if.WUSER),
      .WREADY(pin_if.WREADY),
      .BVALID(pin_if.BVALID),
      .BRESP(pin_if.BRESP),
      .BID(pin_if.BID),
      .BUSER(pin_if.BUSER),
      .BREADY(pin_if.BREADY)
   );

`else

   //
   // Instantiate the QVIP interface
   //
   typedef virtual mgc_ace #(PARAMS) vip_if_t;

   mgc_ace #(PARAMS) vip_if (pin_if.ACLK, pin_if.ARESETn);

   //
   // Put the interface into the UVM configuration structure, 
   //
   initial begin
     uvm_pkg::uvm_config_db #(vip_if_t)::set(null, VIP_IF_UVM_CONTEXT, VIP_IF_UVM_NAME, vip_if);

     //vip_if.ace_set_master_abstraction_level(1'b0,1'b1); // Master end should be TLM    
   end

  // Write address channel signals connection
  assign pin_if.AWID     = vip_if.AWID;
  assign pin_if.AWADDR   = vip_if.AWADDR;
  assign pin_if.AWLEN    = vip_if.AWLEN;
  assign pin_if.AWSIZE   = vip_if.AWSIZE;
  assign pin_if.AWBURST  = vip_if.AWBURST;
  assign pin_if.AWLOCK   = vip_if.AWLOCK;
  assign pin_if.AWCACHE  = vip_if.AWCACHE;
  assign pin_if.AWPROT   = vip_if.AWPROT;
  assign pin_if.AWQOS    = vip_if.AWQOS;
  assign pin_if.AWREGION = vip_if.AWREGION;
  assign pin_if.AWUSER   = vip_if.AWUSER;
  assign pin_if.AWVALID  = vip_if.AWVALID;
  assign vip_if.AWREADY  = pin_if.AWREADY;
  assign pin_if.AWSNOOP  = vip_if.AWSNOOP;
  assign pin_if.AWDOMAIN = vip_if.AWDOMAIN;
  assign pin_if.AWBAR    = vip_if.AWBAR;
  assign pin_if.AWUNIQUE = vip_if.AWUNIQUE;

  // Write data channel signals connection
  assign pin_if.WDATA    = vip_if.WDATA;
  assign pin_if.WSTRB    = vip_if.WSTRB;
  assign pin_if.WLAST    = vip_if.WLAST;
  assign pin_if.WUSER    = vip_if.WUSER;
  assign pin_if.WVALID   = vip_if.WVALID;
  assign vip_if.WREADY   = pin_if.WREADY;

  // Write response channel signals connection
  assign vip_if.BID      = pin_if.BID;
  assign vip_if.BRESP    = pin_if.BRESP;
  assign vip_if.BUSER    = pin_if.BUSER;
  assign vip_if.BVALID   = pin_if.BVALID;
  assign pin_if.BREADY   = vip_if.BREADY;
  assign pin_if.WACK     = vip_if.WACK;

  // Read address channel signals connection
  assign pin_if.ARID     = vip_if.ARID;
  assign pin_if.ARADDR   = vip_if.ARADDR;
  assign pin_if.ARLEN    = vip_if.ARLEN;
  assign pin_if.ARSIZE   = vip_if.ARSIZE;
  assign pin_if.ARBURST  = vip_if.ARBURST;
  assign pin_if.ARLOCK   = vip_if.ARLOCK;
  assign pin_if.ARCACHE  = vip_if.ARCACHE;
  assign pin_if.ARPROT   = vip_if.ARPROT;
  assign pin_if.ARQOS    = vip_if.ARQOS;
  assign pin_if.ARREGION = vip_if.ARREGION;
  assign pin_if.ARUSER   = vip_if.ARUSER;
  assign pin_if.ARVALID  = vip_if.ARVALID;
  assign vip_if.ARREADY  = pin_if.ARREADY;
  assign pin_if.ARSNOOP  = vip_if.ARSNOOP;
  assign pin_if.ARDOMAIN = vip_if.ARDOMAIN;
  assign pin_if.ARBAR    = vip_if.ARBAR;

  // Read response channel signals connection
  assign vip_if.RID      = pin_if.RID;
  assign vip_if.RDATA    = pin_if.RDATA;
  assign vip_if.RRESP    = pin_if.RRESP;
  assign vip_if.RLAST    = pin_if.RLAST;
  assign vip_if.RUSER    = pin_if.RUSER;
  assign vip_if.RVALID   = pin_if.RVALID;
  assign pin_if.RREADY   = vip_if.RREADY;
  assign pin_if.RACK     = vip_if.RACK;

  // Snoop address channel signals connection
  assign vip_if.ACVALID  = pin_if.ACVALID;
  assign pin_if.ACREADY  = vip_if.ACREADY;
  assign vip_if.ACADDR   = pin_if.ACADDR;
  assign vip_if.ACSNOOP  = pin_if.ACSNOOP;
  assign vip_if.ACPROT   = pin_if.ACPROT;

  // Snoop response channel signals connection
  assign pin_if.CRVALID  = vip_if.CRVALID;
  assign vip_if.CRREADY  = pin_if.CRREADY;
  assign pin_if.CRRESP   = vip_if.CRRESP;

  // Snoop data channel signals connection
  assign pin_if.CDVALID  = vip_if.CDVALID;
  assign vip_if.CDREADY  = pin_if.CDREADY;
  assign pin_if.CDDATA   = vip_if.CDDATA;
  assign pin_if.CDLAST   = vip_if.CDLAST;

`endif

endmodule: mgc_ace_master_hdl

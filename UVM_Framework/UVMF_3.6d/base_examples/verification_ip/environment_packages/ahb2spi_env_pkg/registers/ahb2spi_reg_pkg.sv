//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant UVM V4.4 (Build 1)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : registers
// Unit            : ahb2spi_reg_pkg
// File            : ahb2spi_reg_pkg.sv
//----------------------------------------------------------------------
// Created by      : mhorn
// Creation Date   : 4/21/15 11:04 AM
//----------------------------------------------------------------------
// Title           : registers
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// ahb2spi_reg_pkg
//----------------------------------------------------------------------
package ahb2spi_reg_pkg;

   import uvm_pkg::*;
   import wb2spi_reg_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */


   /* BLOCKS */


   //--------------------------------------------------------------------
   // Class: ahb2spi_reg_block_bus_map_coverage
   // 
   // Coverage for the 'bus_map' in 'ahb2spi_reg_block'
   //--------------------------------------------------------------------

   class ahb2spi_reg_block_bus_map_coverage extends uvm_object;
      `uvm_object_utils(ahb2spi_reg_block_bus_map_coverage)

      covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

         option.per_instance = 1;
         option.name = name; 

         ADDR: coverpoint addr {
         }

         RW: coverpoint is_read {
            bins RD = {1};
            bins WR = {0};
         }

         ACCESS: cross ADDR, RW;

      endgroup: ra_cov

      function new(string name = "ahb2spi_reg_block_bus_map_coverage");
         ra_cov = new(name);
      endfunction: new

      function void sample(uvm_reg_addr_t offset, bit is_read);
         ra_cov.sample(offset, is_read);
      endfunction: sample

   endclass: ahb2spi_reg_block_bus_map_coverage



   //--------------------------------------------------------------------
   // Class: ahb2spi_reg_block
   // 
   // Register block for ahb2spi
   //--------------------------------------------------------------------

   class ahb2spi_reg_block extends uvm_reg_block;
      `uvm_object_utils(ahb2spi_reg_block)

      wb2spi_reg_block wb2spi; 

      uvm_reg_map bus_map; 
      ahb2spi_reg_block_bus_map_coverage bus_map_cg;


      // Function: new
      // 
      function new(string name = "ahb2spi_reg_block");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();

         add_hdl_path("hdl_top.DUT");

         if(has_coverage(UVM_CVR_ADDR_MAP)) begin
            bus_map_cg = ahb2spi_reg_block_bus_map_coverage::type_id::create("bus_map_cg");
            bus_map_cg.ra_cov.set_inst_name(this.get_full_name());
            void'(set_coverage(UVM_CVR_ADDR_MAP));
         end
         wb2spi = wb2spi_reg_block::type_id::create("wb2spi");
         wb2spi.configure(this, "wb2spi");
         wb2spi.build();

         bus_map = create_map("bus_map", 'h0, 1, UVM_LITTLE_ENDIAN);
         default_map = bus_map;

         bus_map.add_submap(wb2spi.bus_map, 'h0);

         lock_model();
      endfunction


      // Function: sample
      // 
      function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map  map);
         if(get_coverage(UVM_CVR_ADDR_MAP)) begin
            if(map.get_name() == "bus_map") begin
               bus_map_cg.sample(offset, is_read);
            end
         end
      endfunction: sample

   endclass


endpackage

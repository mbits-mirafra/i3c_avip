{% set fname = "verification_ip/environment_packages/{{env_name}}_env_pkg/src/{{name}}.svh" %}
{% set conditional = "predictor" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} 
// Unit            : {{name}} 
// File            : {{name}}.svh
//----------------------------------------------------------------------
{% endblock %}
{% block contents %}
//
// DESCRIPTION: This analysis component contains analysis_exports for receiving
//   data and analysis_ports for sending data.
// 
//   This analysis component has the following analysis_exports that receive the 
//   listed transaction type.
//   
{% for export in exports %}
//   {{export.name}} receives transactions of type  {{export.tType}}  
{% endfor %}
//
//   This analysis component has the following analysis_ports that can broadcast 
//   the listed transaction type.
//
{% for port in ports %}
//  {{port.name}} broadcasts transactions of type {{port.tType}} 
{% endfor %}
//

class {{name}} extends uvm_component;

  // Factory registration of this class
  `uvm_component_utils( {{name}} );

  // Instantiate the analysis exports
{% for export in exports %}
  uvm_analysis_imp_{{export.name}} #({{export.tType}}, {{name}} ) {{export.name}};
{% endfor %}

  // Instantiate the analysis ports
{% for port in ports %}
  uvm_analysis_port #({{port.tType}}) {{port.name}};
{% endfor %}

{% for port in ports %}
  // Transaction variable for predicted values to be sent out {{port.name}}
  {{port.tType}} {{port.name}}_output_transaction;
  // Code for sending output transaction out through {{port.name}}
  // {{port.name}}.write({{port.name}}_output_transaction);

{% endfor %}

  // FUNCTION: new
  function new(string name, uvm_component parent);
     super.new(name,parent);
  endfunction

  // FUNCTION: build_phase
  virtual function void build_phase (uvm_phase phase);
    super.build_phase(phase);

{% for export in exports %}
    {{export.name}} = new("{{export.name}}", this);
{% endfor %}

{% for port in ports %}
    {{port.name}} =new("{{port.name}}", this );
{% endfor %}

  endfunction

{% for export in exports %}
  // FUNCTION: write_{{export.name}}
  // Transactions received through {{export.name}} initiate the execution of this function.
  // This function performs prediction of DUT output values based on DUT input, configuration and state
  virtual function void write_{{export.name}}({{export.tType}} t);
    `uvm_info("{{name}}", "Transaction Recievied through {{export.name}}", UVM_MEDIUM)

  // Construct one of each output transaction type.
{% for port in ports %}
  {{port.name}}_output_transaction = {{port.tType}}::type_id::create("{{port.name}}_output_transaction");
{% endfor %}

{% for port in ports %}
    // Code for sending output transaction out through {{port.name}}
    {{port.name}}.write({{port.name}}_output_transaction);
{% endfor %}
  endfunction

{% endfor %}
endclass 

{% endblock %}

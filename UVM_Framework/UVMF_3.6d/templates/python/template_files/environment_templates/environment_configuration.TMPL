{% set fname = "verification_ip/environment_packages/{{name}}_env_pkg/src/{{name}}_env_configuration.svh" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} Environment 
// Unit            : Environment configuration
// File            : {{name}}_env_configuration.svh
//----------------------------------------------------------------------
//                                          
// DESCRIPTION: THis is the configuration for the {{name}} environment.
//  it contains configuration classes for each agent.  It also contains
//  environment level configuration variables.
//
{% endblock %}

{% block contents %}
class {{name}}_env_configuration extends uvmf_environment_configuration_base;

  `uvm_object_utils( {{name}}_env_configuration );

{% for sub_env in subEnvironments %}
   {{sub_env.envPkg}}_env_configuration {{sub_env.name}}_config;
{% endfor %}

{% for agent in agents %}
    {{agent.ifPkg}}_configuration {{agent.name}}_config;
{% endfor %}

// ****************************************************************************
// FUNCTION : new()
// This function is the standard SystemVerilog constructor.
// This function constructs the configuration object for each agent in the environment.
//
  function new( string name = "" );
    super.new( name );

{% for sub_env in subEnvironments %}
   {{sub_env.name}}_config = {{sub_env.envPkg}}_env_configuration::type_id::create("{{sub_env.name}}_config");
{% endfor %}

{% for agent in agents %}
    {{agent.name}}_config = {{agent.ifPkg}}_configuration::type_id::create("{{agent.name}}_config");
{% endfor %}
  endfunction

// ****************************************************************************
// FUNCTION: convert2string()
// This function converts all variables in this class to a single string for
// logfile reporting. This function concatenates the convert2string result for
// each agent configuration in this configuration class.
//
  virtual function string convert2string();
    return {
{% for agent in agents %}
    {{agent.name}}_config.convert2string{% if not loop.last %}, {% endif %}
{% endfor %}
    };

  endfunction
// ****************************************************************************
// FUNCTION: initialize();
// This function configures each interface agents configuration class.  The 
// sim level determines the active/passive state of the agent.  The environment_path
// identifies the hierarchy down to and including the instantiation name of the
// environment for this configuration class.  Each instance of the environment 
// has its own configuration class.  The string interface names are used by 
// the agent configurations to identify the virtual interface handle to pull from
// the uvm_config_db.  
//
  function void initialize(uvmf_sim_level_t sim_level, 
                                      string environment_path,
                                      string interface_names[],
                                      uvm_reg_block register_model = null,
                                      uvmf_active_passive_t interface_activity[] = null
                                     );
{% for sub_env in subEnvironments %}
    string                {{sub_env.name}}_interface_names[];
    uvmf_active_passive_t {{sub_env.name}}_interface_activity[];
{% endfor %}

    super.initialize(sim_level, environment_path, interface_names, register_model, interface_activity);

{% for sub_env in subEnvironments %}
    {{sub_env.name}}_interface_names    = new[{{sub_env.numAgents}}];
    {{sub_env.name}}_interface_activity = new[{{sub_env.numAgents}}];

    {{sub_env.name}}_interface_names     = interface_names[{{sub_env.agentMinIndex}}:{{sub_env.agentMaxIndex}}];
    {{sub_env.name}}_interface_activity  = interface_activity[{{sub_env.agentMinIndex}}:{{sub_env.agentMaxIndex}}];
{% endfor %}


{% for agent in agents %}
     {{agent.name}}_config.initialize( interface_activity[{{loop.index-1}}], {environment_path,".{{agent.name}}"}, interface_names[{{loop.index-1}}]);
{% endfor %}

{% for sub_env in subEnvironments %}
        {{sub_env.name}}_config.initialize( NA, {environment_path,".{{sub_env.name}}"}, {{sub_env.name}}_interface_names, null,   {{sub_env.name}}_interface_activity);
{% endfor %}

  endfunction

endclass

{% endblock %}


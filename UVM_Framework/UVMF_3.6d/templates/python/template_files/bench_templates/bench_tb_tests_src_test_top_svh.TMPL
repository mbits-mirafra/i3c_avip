{% set fname = "project_benches/{{name}}/tb/tests/src/test_top.svh" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} Simulation Bench 
// Unit            : Top level UVM test
// File            : test_top.svh
//----------------------------------------------------------------------
// Description: This top level UVM test is the base class for all
//     future tests created for this project.
//
//     This test class contains:
//          Configuration:  The top level configuration for the project.
//          Environment:    The top level environment for the project.
//          Top_level_sequence:  The top level sequence for the project.
//                                          
{% endblock %}

{% block contents %}

class test_top extends uvmf_test_base #(.CONFIG_T({{env_name}}_env_configuration), 
                                        .ENV_T({{env_name}}_environment), 
                                        .TOP_LEVEL_SEQ_T({{name}}_bench_sequence_base));

  `uvm_component_utils( test_top );

{% if veloceReady %}

  //variable: clk_ctrl
  //Clock Proxy Object used to control the Clock
  // Must be extended clock_ctrl object and not clock_ctrl_base because
  // bfm is set here.  Usage elsewhere in testbench can just use a
  // clock_ctrl_base handle.
  clock_ctrl #(CLK_PHASE_OFFSET_IN_PS) clk_ctrl;
  
  //variable: reset_ctrl
  //Reset Proxy Object used to control Reset
  // Must be extended reset_ctrl object and not reset_ctrl_base because bfm
  // is set here.  Usage elsewhere in testbench can just use a reset_ctrl_base
  // handle
  sync_reset_ctrl #(RST_POLARITY) reset_ctrl;

{% endif %}

// ****************************************************************************
// FUNCTION: new()
// This is the standard system verilog constructor.  All components are 
// constructed in the build_phase to allow factory overriding.
//
  function new( string name = "", uvm_component parent = null );
     super.new( name ,parent );
  endfunction


{% if veloceReady %}
// ****************************************************************************
// FUNCTION: setup_clock_reset_controllers()
// 
//
  function void setup_clock_reset_controllers();
      virtual clock_bfm #(CLK_PHASE_OFFSET_IN_PS) clk_bfm;
      virtual sync_reset_bfm #(RST_POLARITY) sync_rst_bfm;

      // Construct the clock controller proxy
      clk_ctrl = clock_ctrl #(CLK_PHASE_OFFSET_IN_PS)::type_id::create("clk_ctrl");
      //Set the bfm handle in the clk_ctrl
      if (!uvm_config_db#(virtual clock_bfm #(CLK_PHASE_OFFSET_IN_PS) )::get(null, UVMF_VIRTUAL_INTERFACES, CLOCK_CONTROLLER, clk_bfm)) begin
        `uvm_fatal("TEST_TOP", "Could not get the Clock BFM Interface")
      end
      clk_ctrl.set_bfm(clk_bfm);
      // Make clock controller proxy available to environment
      uvm_config_db #( clock_ctrl_base )::set(null, UVMF_CLOCK_APIS, CLOCK_CONTROLLER, clk_ctrl);

      // Construct the reset controller proxy
      reset_ctrl = sync_reset_ctrl #(RST_POLARITY)::type_id::create("reset_ctrl");
      //Set the bfm handle in the reset_ctrl
      if (!uvm_config_db#(virtual sync_reset_bfm #(RST_POLARITY))::get(null, UVMF_VIRTUAL_INTERFACES, RESET_CONTROLLER, sync_rst_bfm)) begin
        `uvm_fatal("TEST_TOP", "Could not get the Reset BFM Interface")
      end
      reset_ctrl.set_bfm(sync_rst_bfm);
      // Make reset controller proxy available to environment
      uvm_config_db #( reset_ctrl_base )::set(null, UVMF_RESET_APIS, RESET_CONTROLLER, reset_ctrl);

  endfunction

{% endif %}


// ****************************************************************************
// FUNCTION: build_phase()
// The construction of the configuration and environment classes is done in
// the build_phase of uvmf_test_base.  Once the configuraton and environment
// classes are built then the initialize call is made to perform the
// following: 
//     Monitor and driver BFM virtual interface handle passing into agents
//     Set the active/passive state for each agent
// Once this build_phase completes, the build_phase of the environment is
// executed which builds the agents.
//
  virtual function void build_phase(uvm_phase phase);

    super.build_phase(phase);
    configuration.initialize(BLOCK, "uvm_test_top.environment", {{name}}_parameters_pkg::interface_names, null, {{name}}_parameters_pkg::interface_activities);

{% if veloceReady %}
    setup_clock_reset_controllers();
{% endif %}


  endfunction

endclass

{% endblock %}


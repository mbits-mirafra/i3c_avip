
#
#----------------------------------------------------------------------
#                                          
# DESCRIPTION: This makefile includes the shared makefile and contains
#   bench level make targets.
#
#----------------------------------------------------------------------


# pragma uvmf custom additional begin
# NOTE: all necessary UVMF_CHANGE_ME updates have been completed...
SCCOM_ARGS ?= -note 6102 -std=c++11 -O2 -c -DSC_INCLUDE_MTI_AC -I$(MGC_HOME)/shared/include -I$(MGC_HOME)/shared/pkgs/matchlib/cmod/include -I$(MGC_HOME)/shared/examples/matchlib/toolkit/include -DCONNECTIONS_ACCURATE_SIM -DSC_INCLUDE_DYNAMIC_PROCESSES -DSEGMENT_BURST_SIZE=16 -Wall -Wno-unknown-pragmas -Wno-unused-variable -Wno-unused-label -Wno-write-strings -Wno-reorder -Wno-maybe-uninitialized -Wno-deprecated-declarations -Wno-misleading-indentation -Wno-int-in-bool-context 
# pragma uvmf custom additional end

# *********************************************************************************************
# UVMF library directory:
# This variable points to the UVMF release where uvmf_base_pkg directory resides.
# This variable points to release code that is not user modified.
# This variable allows for UVMF release directories to reside independent of project related verification IP and project bench directories.
# This code below looks "upward" for directory starting with UVMF_* and returns first match for use with the release examples.
UVMF_HOME ?= ___PLEASE_SET_AN_ENVIRONMENT_VARIABLE_NAMED_UVMF_HOME_TO_POINT_TO_THE_UVMF_INSTALLATION___

# pragma uvmf custom exports begin
#
# Project(s) specific verification_ip library:
# Directory where reusable verification packages for interfaces, environments, utilities, etc. reside.
# This variable allows for verification_ip to reside independent of project bench and UVMF release directories.
# For examples deployed with UVMF this will be $(UVMF_HOME)/<example_group>/verification_ip
export UVMF_VIP_LIBRARY_HOME ?= $(PWD)/../../../verification_ip
#
# Project specific bench:
# Directory where bench specific code is located.
# This variable allows for project_benches to reside independent of verification_ip and UVMF release directories.
# For examples deployed with UVMF this will be $(UVMF_HOME)/<example_group>/project_benches/<example_bench>
export UVMF_PROJECT_DIR ?= $(PWD)/..
#
# *********************************************************************************************
# QVIP specific code generated by QVIP Configurator:
# These variables identify where code generated by the QVIP configurator is located.
# The default values for these variables are to indicate to the user that the value needs to be set.
# This variable should point down to and including the uvmf directory in the QVIP confiurator generated code.
export SCATTER_GATHER_DMA_QVIP_DIR_NAME ?= $(UVMF_HOME)/vip_examples/verification_ip/environment_packages/scatter_gather_dma_qvip_dir/uvmf
#
# pragma uvmf custom exports end
# *********************************************************************************************

## Check PATH for required vinfo scripts
PVAL := $(shell command -v make_filelist.py 2> /dev/null)
ifndef PVAL
  MFLIST = $(UVMF_HOME)/scripts/make_filelist.py
else
  MFLIST = make_filelist.py
endif


# Set test case specific Variables
TEST_NAME            ?= test_top

TEST_SEED            ?= random
UVM_CLI_ARGS         = 

# Usage of Veloce, etc. to be input by the user (subject to defaults)
USE_VELOCE          ?= 0

# Usage of vinfo flow for generating file list
USE_VINFO           ?= 0

# Usage of Veloce and Questa profilers
USE_VELOCE_PROFILER ?= 0
USE_QUESTA_PROFILER ?= 0


# Set project Variables
TEST_PLAN_NAME       = scatter_gather_dma_TestPlan
REPORTING_DO_FILE    = scatter_gather_dma_reports_script


# Include makefile that includes targets for UVM_VIP_Library packages
include $(UVMF_HOME)/scripts/Makefile

include $(UVMF_HOME)/common/utility_packages/qvip_utils_pkg/Makefile



# Include all requisite interface package targets for this bench
include $(UVMF_VIP_LIBRARY_HOME)/interface_packages/ccs_pkg/Makefile

# Include all requisite environment package targets for this bench
include $(UVMF_VIP_LIBRARY_HOME)/environment_packages/scatter_gather_dma_env_pkg/Makefile



# Add to default compile/load/run arguments
VCOM_ARGS             += 

# Note: vsim-3009 error can be eliminated by adding -timescale 1ps/1ps to VLOG_ARGS
VLOG_ARGS             +=  -timescale 1ps/1ps

VLOG_ARGS             += $(UVM_DISABLE_FILE_LINE_CMD)

VELANALYZE_ARGS       +=
VELANALYZE_HVL_ARGS   +=

BATCH_VOPT_ARGS       +=
DEBUG_VOPT_ARGS       +=
EXTRA_VOPT_TOPS       += 
COMMON_VSIM_ARGS      +=  -mvchome $(QUESTA_MVC_HOME)  
COMMON_VSIM_ARGS      +=  


BATCH_VSIM_ARGS       += #-uvmcontrol=none
DEBUG_VSIM_ARGS       += 
EXTRA_VSIM_TOPS       += 


# Project bench package source
scatter_gather_dma_PARAMETERS_PKG ?=\
$(UVMF_PROJECT_DIR)/tb/parameters/scatter_gather_dma_parameters_pkg.sv


scatter_gather_dma_SEQUENCES_PKG ?=\
$(UVMF_PROJECT_DIR)/tb/sequences/scatter_gather_dma_sequences_pkg.sv


scatter_gather_dma_TEST_PKG ?=\
$(UVMF_PROJECT_DIR)/tb/tests/scatter_gather_dma_tests_pkg.sv

# pragma uvmf custom dut_files begin
# UVMF_CHANGE_ME : Reference Verilog DUT source.
scatter_gather_dma_VERILOG_DUT =\
$(UVMF_PROJECT_DIR)/rtl/verilog/concat_rtl.v
# $(UVMF_PROJECT_DIR)/rtl/verilog/verilog_dut.v

# UVMF_CHANGE_ME : Reference VHDL DUT source.
scatter_gather_dma_VHDL_DUT =\
$(UVMF_PROJECT_DIR)/rtl/vhdl/vhdl_dut.vhd

scatter_gather_dma_SYSTEMC_DUT =\
$(UVMF_PROJECT_DIR)/sysc/scatter_gather_dma_wrap.cpp
# pragma uvmf custom dut_files end


# Project bench package targets
COMP_scatter_gather_dma_PARAMETERS_PKG_TGT_0 = q_comp_scatter_gather_dma_parameters_pkg
COMP_scatter_gather_dma_PARAMETERS_PKG_TGT_1 = v_comp_scatter_gather_dma_parameters_pkg
COMP_scatter_gather_dma_PARAMETERS_PKG_TGT = $(COMP_scatter_gather_dma_PARAMETERS_PKG_TGT_$(USE_VELOCE))

comp_scatter_gather_dma_parameters_pkg: $(COMP_scatter_gather_dma_PARAMETERS_PKG_TGT)

q_comp_scatter_gather_dma_parameters_pkg:
	        $(HVL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/parameters $(scatter_gather_dma_PARAMETERS_PKG)

v_comp_scatter_gather_dma_parameters_pkg: q_comp_scatter_gather_dma_parameters_pkg
	$(HDL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/parameters $(scatter_gather_dma_PARAMETERS_PKG)
 

comp_scatter_gather_dma_sequence_pkg:
	$(HVL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/sequences $(scatter_gather_dma_SEQUENCES_PKG)

comp_scatter_gather_dma_tests_pkg:
	$(HVL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/tests $(scatter_gather_dma_TEST_PKG)

# pragma uvmf custom dut_compile_make_target begin
# UVMF_CHANGE_ME : Add make target to compile your verilog dut here
comp_scatter_gather_dma_verilog_dut:
	echo "Compile your verilog DUT here"
	$(HDL_COMP_CMD) $(scatter_gather_dma_VERILOG_DUT)

# UVMF_CHANGE_ME : Add make target to compile your vhdl dut here
comp_scatter_gather_dma_vhdl_dut:
	echo "Compile your vhdl DUT here"
	$(HDL_COMP_CMD_VHDL) $(scatter_gather_dma_VHDL_DUT)

comp_scatter_gather_dma_systemc_dut:
	echo "Compile your SystemC DUT here"
	sccom $(SCCOM_ARGS) $(EXTRA_SCCOM_ARGS) $(scatter_gather_dma_SYSTEMC_DUT)

link_scatter_gather_dma_systemc_dut:
	sccom -link -verbose $(SCCOM_LINK_ARGS)

# UVMF_CHANGE_ME : Add make target to compile your dut here
# comp_scatter_gather_dma_dut: comp_scatter_gather_dma_verilog_dut comp_scatter_gather_dma_vhdl_dut

SCATTER_GATHER_DMA_RTL ?= 1
# if using SystemC rather than RTL DUT, add VLOG arg to instantiate SystemC DUT within tb/testbench/hdl_top.sv
ifeq ($(SCATTER_GATHER_DMA_RTL),0)
  EXTRA_VLOG_ARGS = "+define+SCATTER_GATHER_DMA_SYSC"
endif

HLV_CODE_COVERAGE_ENABLE ?= 0
comp_scatter_gather_dma_dut_0_0: comp_scatter_gather_dma_systemc_dut link_scatter_gather_dma_systemc_dut
comp_scatter_gather_dma_dut_1_0: comp_scatter_gather_dma_verilog_dut
comp_scatter_gather_dma_dut_1_1:
	@echo "setting SCATTER_GATHER_DMA_RTL=1 and HLV_CODE_COVERAGE_ENABLE=1 is a bogus combination. To enable code coverage on RTL, use CODE_COVERAGE_ENABLE"

DUT_TGT_0_0 = comp_scatter_gather_dma_dut_0_0
DUT_TGT_0_1 = comp_scatter_gather_dma_dut_0_1
DUT_TGT_1_0 = comp_scatter_gather_dma_dut_1_0
DUT_TGT_1_1 = comp_scatter_gather_dma_dut_1_1
DUT_TGT = $(DUT_TGT_$(SCATTER_GATHER_DMA_RTL)_$(HLV_CODE_COVERAGE_ENABLE))

comp_scatter_gather_dma_dut: $(DUT_TGT)
# pragma uvmf custom dut_compile_make_target end

comp_qvip: 
	$(HVL_COMP_CMD) +define+MAP_PROT_ATTR +incdir+$(QUESTA_MVC_HOME)/questa_mvc_src/sv/ -f $(SCATTER_GATHER_DMA_QVIP_DIR_NAME)/scatter_gather_dma_qvip_filelist.f
	$(HVL_COMP_CMD) +define+MAP_PROT_ATTR +incdir+$(SCATTER_GATHER_DMA_QVIP_DIR_NAME) $(SCATTER_GATHER_DMA_QVIP_DIR_NAME)/hdl_scatter_gather_dma_qvip.sv

BUILD_TGT_0 = make_build
BUILD_TGT_1 = vinfo_build
BUILD_TGT = $(BUILD_TGT_$(USE_VINFO))


comp_hvl : comp_hvl_core


comp_hvl_core :  comp_qvip comp_qvip_utils_pkg   \
	 comp_ccs_pkg  \
	comp_scatter_gather_dma_env_pkg \
	comp_scatter_gather_dma_parameters_pkg comp_scatter_gather_dma_sequence_pkg comp_scatter_gather_dma_tests_pkg 

comp_uvmf_core : comp_uvm_pkg comp_uvmf_base_pkg 

make_build: comp_scatter_gather_dma_dut comp_uvmf_core comp_hvl comp_test_bench  

hvl_build:  q_comp_ccs_pkg  comp_scatter_gather_dma_env_pkg comp_scatter_gather_dma_sequence_pkg comp_scatter_gather_dma_tests_pkg hvl_comp_testbench link optimize


vinfo_build: comp_qvip  comp_scatter_gather_dma_vhdl_dut  build_hdl_vinfo build_hvl_vinfo $(VINFO_TGT)

	$(HDL_COMP_CMD) -F hdl.vf
	$(VEL_COMP)

build: $(BUILD_TGT)




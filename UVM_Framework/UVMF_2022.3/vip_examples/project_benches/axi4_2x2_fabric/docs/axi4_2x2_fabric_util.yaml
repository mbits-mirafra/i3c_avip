# This yaml file defines all of the utility components such as predictors
# and sorters.  they are defined here and utilized within the environment 
# yaml files.
uvmf:
  util_components:
    "axi4_master_predictor":
      type: "predictor"
      ## Here I am demonstrating how you can pass-in a 'type' directly to avoid passing individual parameters
      parameters:
        - name: "axi4_master_rw_transaction_t"
          type: "type"
      qvip_analysis_exports:
        - name: "axi4_ae"
          type: "axi4_master_rw_transaction_t"
      ## No longer needed as we now use the 'qvip_analysis_exports' tag which implicitly casts to the right type
#      analysis_exports:
#        - { name: "axi4_ae", type: "mvc_sequence_item_base" }
      analysis_ports:
        - name: "axi4_ap"
          type: "axi4_master_rw_transaction_t"
    "axi4_slave_predictor":
      type: "predictor"
      ## Here I am demonstrating how you can pass individual parameters that will be utilized inside the predictor class
      parameters:
        - name: "AXI4_ADDRESS_WIDTH"
          type: "int"
          value: "32"
        - name: "AXI4_RDATA_WIDTH"
          type: "int"
          value: "32"
        - name: "AXI4_WDATA_WIDTH"
          type: "int"
          value: "32"
        - name: "AXI4_ID_WIDTH"
          type: "int"
          value: "5"
        - name: "AXI4_USER_WIDTH"
          type: "int"
          value: "4"
        - name: "AXI4_REGION_MAP_SIZE"
          type: "int"
          value: "16"
      qvip_analysis_exports:
        ## Note how I am using the parameters defined above for the transaction below
        - name: "axi4_ae"
          type: "axi4_master_rw_transaction
           \n      #(.AXI4_ADDRESS_WIDTH(AXI4_ADDRESS_WIDTH),
           \n        .AXI4_RDATA_WIDTH(AXI4_RDATA_WIDTH),
           \n        .AXI4_WDATA_WIDTH(AXI4_WDATA_WIDTH), 
           \n        .AXI4_ID_WIDTH(AXI4_ID_WIDTH),
           \n        .AXI4_USER_WIDTH(AXI4_USER_WIDTH),
           \n        .AXI4_REGION_MAP_SIZE(AXI4_REGION_MAP_SIZE))"
      ## No longer needed as we now use the 'qvip_analysis_exports' tag which implicitly casts to the right type
#      analysis_exports:
#        - { name: "axi4_ae", type: "mvc_sequence_item_base" }
      analysis_ports:
        ## Note how I am not using the class parameters, but rather parameters directly from the imported QVIP Configurator Params Pkg
        - name: "axi4_m0_ap"
          type: "axi4_master_rw_transaction \
                   #(.AXI4_ADDRESS_WIDTH(mgc_axi4_m0_params::AXI4_ADDRESS_WIDTH),\
                     .AXI4_RDATA_WIDTH(mgc_axi4_m0_params::AXI4_RDATA_WIDTH),\
                     .AXI4_WDATA_WIDTH(mgc_axi4_m0_params::AXI4_WDATA_WIDTH),\
                     .AXI4_ID_WIDTH(mgc_axi4_m0_params::AXI4_ID_WIDTH),\
                     .AXI4_USER_WIDTH(mgc_axi4_m0_params::AXI4_USER_WIDTH),\
                     .AXI4_REGION_MAP_SIZE(mgc_axi4_m0_params::AXI4_REGION_MAP_SIZE))"
        - name: "axi4_m1_ap"
          type: "axi4_master_rw_transaction \
                   #(.AXI4_ADDRESS_WIDTH(mgc_axi4_m1_params::AXI4_ADDRESS_WIDTH),\
                     .AXI4_RDATA_WIDTH(mgc_axi4_m1_params::AXI4_RDATA_WIDTH),\
                     .AXI4_WDATA_WIDTH(mgc_axi4_m1_params::AXI4_WDATA_WIDTH),\
                     .AXI4_ID_WIDTH(mgc_axi4_m1_params::AXI4_ID_WIDTH),\
                     .AXI4_USER_WIDTH(mgc_axi4_m1_params::AXI4_USER_WIDTH),\
                     .AXI4_REGION_MAP_SIZE(mgc_axi4_m1_params::AXI4_REGION_MAP_SIZE))"
    ## This predictor is needed to sort the transactions to the correct scoreboard since masters can send to either slave.  No translation/conversion between data types is needed.
    "axi4_slave_rw_predictor":
      type: "predictor"
      analysis_exports:
        - { name: "axi4_s0_ae", type: "rw_txn" }
        - { name: "axi4_s1_ae", type: "rw_txn" }
      analysis_ports:
        - { name: "axi4_m0_ap", type: "rw_txn" }
        - { name: "axi4_m1_ap", type: "rw_txn" }

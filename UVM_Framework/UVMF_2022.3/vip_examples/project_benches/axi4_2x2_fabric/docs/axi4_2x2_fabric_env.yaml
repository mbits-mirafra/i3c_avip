# This YAML file defines the environment and all of its components/connections.
uvmf:
  environments:
    "axi4_2x2_fabric":
      ## There are no environment level parameters needed
#      parameters :
#        - { name: "", type: "", value: '' }
      imports:
        - { name: 'rw_txn_pkg' }
      qvip_subenvs:
        ## This is the instantiation of the QVIP Configurator generated YAML definition
        - { name: "axi4_qvip_subenv", type: "axi4_2x2_fabric_qvip"}
        ## Note that the R/W Predictors are defined externally by the user and are not generated by the UVMF
      analysis_components:
        - name: "axi4_m0_pred"
          type: "axi4_master_predictor"
          parameters:
            ## Note how the name matches the definition in the 'util_components' & the value is the definition of the type
            - name: "axi4_master_rw_transaction_t"
              value: "axi4_master_rw_transaction
                      \n   #(.AXI4_ADDRESS_WIDTH(mgc_axi4_m0_params::AXI4_ADDRESS_WIDTH),
                      \n     .AXI4_RDATA_WIDTH(mgc_axi4_m0_params::AXI4_RDATA_WIDTH),
                      \n     .AXI4_WDATA_WIDTH(mgc_axi4_m0_params::AXI4_WDATA_WIDTH),
                      \n     .AXI4_ID_WIDTH(mgc_axi4_m0_params::AXI4_ID_WIDTH),
                      \n     .AXI4_USER_WIDTH(mgc_axi4_m0_params::AXI4_USER_WIDTH),
                      \n     .AXI4_REGION_MAP_SIZE(mgc_axi4_m0_params::AXI4_REGION_MAP_SIZE))"
        - name: "axi4_m1_pred"
          type: "axi4_master_predictor"
          parameters:
            - name: "axi4_master_rw_transaction_t"
              value: "axi4_master_rw_transaction
                      \n   #(.AXI4_ADDRESS_WIDTH(mgc_axi4_m1_params::AXI4_ADDRESS_WIDTH),
                      \n     .AXI4_RDATA_WIDTH(mgc_axi4_m1_params::AXI4_RDATA_WIDTH),
                      \n     .AXI4_WDATA_WIDTH(mgc_axi4_m1_params::AXI4_WDATA_WIDTH),
                      \n     .AXI4_ID_WIDTH(mgc_axi4_m1_params::AXI4_ID_WIDTH),
                      \n     .AXI4_USER_WIDTH(mgc_axi4_m1_params::AXI4_USER_WIDTH),
                      \n     .AXI4_REGION_MAP_SIZE(mgc_axi4_m1_params::AXI4_REGION_MAP_SIZE))"
        - name: "axi4_s0_pred"
          type: "axi4_slave_predictor"
          ## Note that the names need to match the declaration of the component defined in the 'util_components' tag
          parameters:
            - name: "AXI4_ADDRESS_WIDTH"
              value: "mgc_axi4_s0_params::AXI4_ADDRESS_WIDTH"
            - name: "AXI4_RDATA_WIDTH"
              value: "mgc_axi4_s0_params::AXI4_RDATA_WIDTH"
            - name: "AXI4_WDATA_WIDTH"
              value: "mgc_axi4_s0_params::AXI4_WDATA_WIDTH"
            - name: "AXI4_ID_WIDTH"
              value: "mgc_axi4_s0_params::AXI4_ID_WIDTH"
            - name: "AXI4_USER_WIDTH"
              value: "mgc_axi4_s0_params::AXI4_USER_WIDTH"
            - name: "AXI4_REGION_MAP_SIZE"
              value: "mgc_axi4_s0_params::AXI4_REGION_MAP_SIZE"
        - name: "axi4_s1_pred"
          type: "axi4_slave_predictor"
          parameters:
            - name: "AXI4_ADDRESS_WIDTH"
              value: "mgc_axi4_s1_params::AXI4_ADDRESS_WIDTH"
            - name: "AXI4_RDATA_WIDTH"
              value: "mgc_axi4_s1_params::AXI4_RDATA_WIDTH"
            - name: "AXI4_WDATA_WIDTH"
              value: "mgc_axi4_s1_params::AXI4_WDATA_WIDTH"
            - name: "AXI4_ID_WIDTH"
              value: "mgc_axi4_s1_params::AXI4_ID_WIDTH"
            - name: "AXI4_USER_WIDTH"
              value: "mgc_axi4_s1_params::AXI4_USER_WIDTH"
            - name: "AXI4_REGION_MAP_SIZE"
              value: "mgc_axi4_s1_params::AXI4_REGION_MAP_SIZE"
        - { name: "axi4_slave_rw_pred", type: "axi4_slave_rw_predictor" }
      scoreboards:
        - name: "axi4_m0_sb"
          sb_type: "uvmf_in_order_race_scoreboard"
          trans_type: "axi4_master_rw_transaction
           \n            #(.AXI4_ADDRESS_WIDTH(mgc_axi4_m0_params::AXI4_ADDRESS_WIDTH),
           \n              .AXI4_RDATA_WIDTH(mgc_axi4_m0_params::AXI4_RDATA_WIDTH),
           \n              .AXI4_WDATA_WIDTH(mgc_axi4_m0_params::AXI4_WDATA_WIDTH),
           \n              .AXI4_ID_WIDTH(mgc_axi4_m0_params::AXI4_ID_WIDTH),
           \n              .AXI4_USER_WIDTH(mgc_axi4_m0_params::AXI4_USER_WIDTH),
           \n              .AXI4_REGION_MAP_SIZE(mgc_axi4_m0_params::AXI4_REGION_MAP_SIZE))"
        - name: "axi4_m1_sb"
          sb_type: "uvmf_in_order_race_scoreboard"
          trans_type: "axi4_master_rw_transaction
           \n            #(.AXI4_ADDRESS_WIDTH(mgc_axi4_m1_params::AXI4_ADDRESS_WIDTH),
           \n              .AXI4_RDATA_WIDTH(mgc_axi4_m1_params::AXI4_RDATA_WIDTH),
           \n              .AXI4_WDATA_WIDTH(mgc_axi4_m1_params::AXI4_WDATA_WIDTH),
           \n              .AXI4_ID_WIDTH(mgc_axi4_m1_params::AXI4_ID_WIDTH),
           \n              .AXI4_USER_WIDTH(mgc_axi4_m1_params::AXI4_USER_WIDTH),
           \n              .AXI4_REGION_MAP_SIZE(mgc_axi4_m1_params::AXI4_REGION_MAP_SIZE))"
        - { name: "axi4_m0_rw_sb", sb_type: "uvmf_in_order_race_scoreboard", trans_type: "rw_txn" }
        - { name: "axi4_m1_rw_sb", sb_type: "uvmf_in_order_race_scoreboard", trans_type: "rw_txn" }
      qvip_connections:
        - { driver: "axi4_qvip_subenv.mgc_axi4_m0", ap_key: "trans_ap", receiver: "axi4_m0_pred.axi4_ae" }
        - { driver: "axi4_qvip_subenv.mgc_axi4_m1", ap_key: "trans_ap", receiver: "axi4_m1_pred.axi4_ae" }
        - { driver: "axi4_qvip_subenv.mgc_axi4_s0", ap_key: "trans_ap", receiver: "axi4_s0_pred.axi4_ae" }
        - { driver: "axi4_qvip_subenv.mgc_axi4_s1", ap_key: "trans_ap", receiver: "axi4_s1_pred.axi4_ae" }
      tlm_connections:
        - { driver: "axi4_m0_pred.axi4_ap", receiver: "axi4_m0_sb.expected_analysis_export" }
        - { driver: "axi4_m1_pred.axi4_ap", receiver: "axi4_m1_sb.expected_analysis_export" }
        - { driver: "axi4_s0_pred.axi4_m0_ap", receiver: "axi4_m0_sb.actual_analysis_export" }
        - { driver: "axi4_s1_pred.axi4_m0_ap", receiver: "axi4_m0_sb.actual_analysis_export" }
        - { driver: "axi4_s0_pred.axi4_m1_ap", receiver: "axi4_m1_sb.actual_analysis_export" }
        - { driver: "axi4_s1_pred.axi4_m1_ap", receiver: "axi4_m1_sb.actual_analysis_export" }
        # QVIP creates an AP to output the 'rw_txn', so connect it directly to SB instead of using a predictor
        - { driver: "axi4_qvip_subenv.mgc_axi4_m0.export_rw", receiver: "axi4_m0_rw_sb.expected_analysis_export" }
        - { driver: "axi4_qvip_subenv.mgc_axi4_m1.export_rw", receiver: "axi4_m1_rw_sb.expected_analysis_export" }
        - { driver: "axi4_qvip_subenv.mgc_axi4_s0.export_rw", receiver: "axi4_slave_rw_pred.axi4_s0_ae" }
        - { driver: "axi4_qvip_subenv.mgc_axi4_s1.export_rw", receiver: "axi4_slave_rw_pred.axi4_s1_ae" }
        - { driver: "axi4_slave_rw_pred.axi4_m0_ap", receiver: "axi4_m0_rw_sb.actual_analysis_export" }
        - { driver: "axi4_slave_rw_pred.axi4_m1_ap", receiver: "axi4_m1_rw_sb.actual_analysis_export" }

{% set fname = "{{vip_location}}/{{environment_location}}/{{env_name}}_env_pkg/{{src_dir}}{{name}}.svh" %}
{% set conditional = "coverage" %}
{% extends "base_template.TMPL" %}

{% block description %}
//----------------------------------------------------------------------
//
// DESCRIPTION: 
//         This component is used to collect functional coverage at the environment level.
//   Coverage collection components typically do not have analysis ports for broadcasting
//   transactions.  They typically only receive transactions and sample functional coverage
//   on the transaction variables.
// 
//   This analysis component has the following analysis_exports that receive the 
//   listed transaction type.
//   
{% for export in exports %}
//   {{export.name}} receives transactions of type  {{export.tType}}  
{% endfor %}
//
//   This analysis component has the following analysis_ports that can broadcast 
//   the listed transaction type.
//
{% for port in ports %}
//  {{port.name}} broadcasts transactions of type {{port.tType}} 
{% endfor %}
//
//----------------------------------------------------------------------
{% endblock %}
{% block contents %}


class {{name}} {{macro.paramDeclare(parameters)|indent(2)}} extends BASE_T;

  // Factory registration of this class
{{macro.compUtils(name,parameters)}}

  // Instantiate a handle to the configuration of the environment in which this component resides
  CONFIG_T configuration;

{% if exports|length >0 %}  
  // Instantiate the analysis exports
{% endif %}
{% for export in exports %}
  uvm_analysis_imp_{{export.name}} #({{export.tType}}, {{name}} {{macro.paramUse(parameters)|indent(30)}}) {{export.name}};
{% endfor %}

{% if ports|length > 0 %}
  // Instantiate the analysis ports
{% endif %}
{% for port in ports %}
  uvm_analysis_port #({{port.tType}}) {{port.name}};
{% endfor %}

{% if qvip_exports|length > 0 %} 
  // Instantiate QVIP analysis exports
{% endif %}
{% for export in qvip_exports %}
  uvm_analysis_imp_{{export.name}} #(mvc_sequence_item_base, {{name}} {{macro.paramUse(parameters)|indent(30)}}) {{export.name}};
{% endfor %}

{% for port in ports %}
  // Transaction variable for transactions to be sent out {{port.name}}
  typedef {{port.tType}} {{port.name}}_output_transaction_t;
  {{port.name}}_output_transaction_t {{port.name}}_output_transaction;
  // Code for sending output transaction out through {{port.name}}
  // {{port.name}}.write({{port.name}}_output_transaction);
{% endfor %}

  // pragma uvmf custom class_item_additional begin
  // pragma uvmf custom class_item_additional end

// ****************************************************************************
  // UVMF_CHANGE_ME : Add coverage bins, crosses, exclusions, etc. according to coverage needs.
  covergroup {{name}}_cg;
    // pragma uvmf custom covergroup begin
    option.auto_bin_max=1024;
    option.per_instance=1;
    // pragma uvmf custom covergroup end
  endgroup


// ****************************************************************************
  // FUNCTION: new
  function new(string name, uvm_component parent);
     super.new(name,parent);
    {{name}}_cg=new;
    `uvm_warning("COVERAGE_MODEL_REVIEW", "A covergroup has been constructed which may need review because of either generation or re-generation with merging.  Remove this warning after the covergroup has been reviewed.")
  // pragma uvmf custom new begin
  // pragma uvmf custom new end
  endfunction

// ****************************************************************************
  // FUNCTION: build_phase
  virtual function void build_phase (uvm_phase phase);

    {{name}}_cg.set_inst_name($sformatf("{{name}}_cg_%s",get_full_name()));

{% for export in exports %}
    {{export.name}} = new("{{export.name}}", this);
{% endfor %}
{% for port in ports %}
    {{port.name}} =new("{{port.name}}", this );
{% endfor %}
{% for export in qvip_exports %}
    {{export.name}} = new("{{export.name}}", this);
{% endfor %}
  // pragma uvmf custom build_phase begin
  // pragma uvmf custom build_phase end
  endfunction

{% for export in exports %}
  // ****************************************************************************
  // FUNCTION: write_{{export.name}}
  // Transactions received through {{export.name}} initiate the execution of this function.
  // This function collects functional coverage on variables within the received transaction
  virtual function void write_{{export.name}}({{export.tType}} t);
    // pragma uvmf custom {{export.name}}_coverage begin
    `uvm_info("COV", "Transaction Received through {{export.name}}", UVM_MEDIUM)
    `uvm_info("COV", {"            Data: ",t.convert2string()}, UVM_FULL)

{% for port in ports %}
    // Code to construct output transaction of type {{port.name}}_output_transaction_t
    {{port.name}}_output_transaction = {{port.name}}_output_transaction_t::type_id::create("{{port.name}}_output_transaction");
{% endfor %}
    //  UVMF_CHANGE_ME: Add functional coverage to this component to implement coverage model.  
    `uvm_info("UNIMPLEMENTED_COVERAGE_MODEL", "******************************************************************************************************",UVM_NONE)
    `uvm_info("UNIMPLEMENTED_COVERAGE_MODEL", "UVMF_CHANGE_ME: This component needs to be completed with coverage model",UVM_NONE)
    `uvm_info("UNIMPLEMENTED_COVERAGE_MODEL", "******************************************************************************************************",UVM_NONE)
{% for port in ports %}
    // Code for sending output transaction out through {{port.name}}
    {{port.name}}.write({{port.name}}_output_transaction);
{% endfor %}
    // pragma uvmf custom {{export.name}}_coverage end
  endfunction
{% endfor %}

{% for export in qvip_exports %}
  // FUNCTION: write_{{export.name}}
  // QVIP transactions received through {{export.name}} initiate the execution of this function.
  // This function casts incoming QVIP transactions into the correct protocol type and then performs prediction 
  // of DUT output values based on DUT input, configuration and state
  virtual function void write_{{export.name}}(mvc_sequence_item_base _t);
    // pragma uvmf custom {{export.name}}_coverage begin
    {{export.tType}} t;
    if (!$cast(t,_t)) begin
      `uvm_fatal("COV","Cast from mvc_sequence_item_base to {{export.tType}} in write_{{export.name}} failed!")
    end
    `uvm_info("COV", "Transaction Received through {{export.name}}", UVM_MEDIUM)
    `uvm_info("COV",{"            Data: ",t.convert2string()}, UVM_FULL)
{% if ports|length > 0 %}
    // Construct one of each output transaction type.
{% endif %}
{% for port in ports %}
    {{port.name}}_output_transaction = {{port.name}}_output_transaction_t::type_id::create("{{port.name}}_output_transaction");
{% endfor %}
    //  UVMF_CHANGE_ME: Add functional coverage to this component to implement coverage model.  
    `uvm_info("UNIMPLEMENTED_COVERAGE_MODEL", "******************************************************************************************************",UVM_NONE)
    `uvm_info("UNIMPLEMENTED_COVERAGE_MODEL", "UVMF_CHANGE_ME: This component needs to be completed with coverage model",UVM_NONE)
    `uvm_info("UNIMPLEMENTED_COVERAGE_MODEL", "******************************************************************************************************",UVM_NONE)
{% for port in ports %}
    // Code for sending output transaction out through {{port.name}}
    {{port.name}}.write({{port.name}}_output_transaction);
{% endfor %}
    // pragma uvmf custom {{export.name}}_coverage end
  endfunction  
{% endfor %}
endclass 

// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}

{% set fname = "{{vip_location}}/{{environment_location}}/{{env_name}}_env_pkg/registers/{{regModelPkg}}.sv" %}
{% set conditional = "reg_model" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Placeholder for complete register model.  This placeholder allows
//  compilation of generated environment without modification.
//----------------------------------------------------------------------
{% endblock %}
{% block contents %}

package {{regModelPkg}};

   import uvm_pkg::*;
{% for sub_env_reg_package in subEnvironmentRegPackages %}
   import {{sub_env_reg_package}}::*;
{% endfor %}
// pragma uvmf custom additional_imports begin
// pragma uvmf custom additional_imports end

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */
// pragma uvmf custom define_register_classes begin
{% if busMap != None %}
   //--------------------------------------------------------------------
   // Class: {{env_name}}_example_reg0
   // 
   //--------------------------------------------------------------------
   class {{env_name}}_example_reg0 extends uvm_reg;
      `uvm_object_utils({{env_name}}_example_reg0)

      rand uvm_reg_field example_field; 

      // Function: new
      // 
      function new(string name = "{{env_name}}_example_reg0");
         super.new(name, 8, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         example_field = uvm_reg_field::type_id::create("example_field");
         example_field.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass

   //--------------------------------------------------------------------
   // Class: {{env_name}}_example_reg1
   // 
   //--------------------------------------------------------------------
   class {{env_name}}_example_reg1 extends uvm_reg;
      `uvm_object_utils({{env_name}}_example_reg1)

      rand uvm_reg_field example_field; 

      // Function: new
      // 
      function new(string name = "{{env_name}}_example_reg1");
         super.new(name, 8, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         example_field = uvm_reg_field::type_id::create("example_field");
         example_field.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass
{% endif %}
// pragma uvmf custom define_register_classes end

// pragma uvmf custom define_block_map_coverage_class begin
{% if busMap != None %}
   //--------------------------------------------------------------------
   // Class: {{env_name}}_{{busMap}}_coverage
   // 
   // Coverage for the '{{busMap}}' in '{{env_name}}_reg_model'
   //--------------------------------------------------------------------
   class {{env_name}}_{{busMap}}_coverage extends uvm_object;
      `uvm_object_utils({{env_name}}_{{busMap}}_coverage)

      covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

         option.per_instance = 1;
         option.name = name; 

         ADDR: coverpoint addr {
            bins example_reg0 = {'h0};
            bins example_reg1 = {'h1};
         }

         RW: coverpoint is_read {
            bins RD = {1};
            bins WR = {0};
         }

         ACCESS: cross ADDR, RW;

      endgroup: ra_cov

      function new(string name = "{{env_name}}_{{busMap}}_coverage");
         ra_cov = new(name);
      endfunction: new

      function void sample(uvm_reg_addr_t offset, bit is_read);
         ra_cov.sample(offset, is_read);
      endfunction: sample

   endclass: {{env_name}}_{{busMap}}_coverage
{% endif %}
// pragma uvmf custom define_block_map_coverage_class end

   //--------------------------------------------------------------------
   // Class: {{regBlockClass}}
   // 
   //--------------------------------------------------------------------
   class {{regBlockClass}} extends uvm_reg_block;
      `uvm_object_utils({{regBlockClass}})
// pragma uvmf custom instantiate_registers_within_block begin
{% if busMap != None %}
      rand {{env_name}}_example_reg0 example_reg0;
      rand {{env_name}}_example_reg1 example_reg1;
{% endif %}
// pragma uvmf custom instantiate_registers_within_block end

{% if busMap != None %}
      uvm_reg_map {{busMap}}; 
      {{env_name}}_{{busMap}}_coverage {{busMap}}_cg;
{% endif %}
{% for sub_env in subEnvironments %}
{% if sub_env.regModelPkg != None %}
      {{sub_env.regBlockClass}} {{sub_env.name}}_rm;
{% endif %}
{% endfor %}

      // Function: new
      // 
      function new(string name = "{{className}}");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction

      // Function: build
      // 
      virtual function void build();
{% if busMap != None %}
      {{busMap}} = create_map("{{busMap}}", 0, 4, UVM_LITTLE_ENDIAN);
      if(has_coverage(UVM_CVR_ADDR_MAP)) begin
         {{busMap}}_cg = {{env_name}}_{{busMap}}_coverage::type_id::create("{{busMap}}_cg");
         {{busMap}}_cg.ra_cov.set_inst_name(this.get_full_name());
         void'(set_coverage(UVM_CVR_ADDR_MAP));
      end

{% endif %}

// pragma uvmf custom construct_configure_build_registers_within_block begin
{% if busMap != None %}
      example_reg0 = {{env_name}}_example_reg0::type_id::create("example_reg0");
      example_reg0.configure(this, null, "example_reg0");
      example_reg0.build();
      example_reg1 = {{env_name}}_example_reg1::type_id::create("example_reg1");
      example_reg1.configure(this, null, "example_reg1");
      example_reg1.build();
{% endif %}
// pragma uvmf custom construct_configure_build_registers_within_block end
{% if busMap != None %}
// pragma uvmf custom add_registers_to_block_map begin
      {{busMap}}.add_reg(example_reg0, 'h0, "RW");
      {{busMap}}.add_reg(example_reg1, 'h1, "RW");
// pragma uvmf custom add_registers_to_block_map end
{% endif %}

{% for sub_env in subEnvironments %}
{% if sub_env.regModelPkg != None %}
         {{sub_env.name}}_rm = new("{{sub_env.name}}_rm");
         {{sub_env.name}}_rm.build();
         add_block({{sub_env.name}}_rm);
{% endif %}
{% endfor %}
 
      endfunction

{% if busMap != None %}
      // Function: sample
      // 
      function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map  map);
         if(get_coverage(UVM_CVR_ADDR_MAP)) begin
            if(map.get_name() == "{{busMap}}_cg") begin
               {{busMap}}_cg.sample(offset, is_read);
            end
         end
      endfunction: sample
{% endif %}

   endclass

endpackage

// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}

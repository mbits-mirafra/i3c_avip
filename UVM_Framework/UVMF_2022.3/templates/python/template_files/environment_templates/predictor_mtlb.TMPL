{% set fname = "{{vip_location}}/{{environment_location}}/{{env_name}}_env_pkg/{{src_dir}}{{name}}_mtlb.svh" %}
{% set conditional = "predictor_mtlb" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
// Generated for MTLB flow
//
//----------------------------------------------------------------------
//
// DESCRIPTION: This analysis component contains analysis_exports for receiving
//   data and analysis_ports for sending data.
// 
//   This analysis component has the following analysis_exports that receive the 
//   listed transaction type.
//   
{% for export in exports %}
//   {{export.name}} receives transactions of type  {{export.tType}}
{% endfor %}
//
//   This analysis component has the following analysis_ports that can broadcast 
//   the listed transaction type.
//
{% for port in ports %}
//  {{port.name}} broadcasts transactions of type {{port.tType}}
{% endfor %}
//----------------------------------------------------------------------
{% endblock %}
{% block contents %}

class {{name}} {{macro.paramDeclare(parameters)|indent(2)}} extends uvm_component;

  // Factory registration of this class
{{macro.compUtils(name,parameters)}}

  integer file;
  bit enable_predictor_fwrite=0;

{% for DPIImport in DPIImports %}
{% if DPIImport.name.endswith('_output') %}
  // System Verilog variables for C function {{DPIImport.type}} {{DPIImport.name}} {{DPIImport.cArgs}} 

{% for argument in DPIImport.arguments %}
  {{argument['type']}}  {{argument['name']}} {% if argument['unpacked_dimension'] %}{{argument['unpacked_dimension']}}{% endif %};
{% endfor %}
{% endif %}
{% endfor %}

  // Instantiate a handle to the configuration of the environment in which this component resides
  CONFIG_T configuration;
{% if exports|length > 0 %}  
  // Instantiate the analysis exports
{% endif %}
{% for export in exports %}
  uvm_analysis_imp_{{export.name}} #({{export.tType}}, {{name}} {{macro.paramUse(parameters)|indent(30)}}) {{export.name}};
{% endfor %}
{% if ports|length > 0 %}  
  // Instantiate the analysis ports
{% endif %}
{% for port in ports %}
  uvm_analysis_port #({{port.tType}}) {{port.name}};
{% endfor %}

{% if qvip_exports|length > 0 %} 
  // Instantiate QVIP analysis exports
{% endif %}
{% for export in qvip_exports %}
  uvm_analysis_imp_{{export.name}} #(mvc_sequence_item_base, {{name}} {{macro.paramUse(parameters)|indent(30)}}) {{export.name}};
{% endfor %}

{% for port in ports %}
  // Transaction variable for predicted values to be sent out {{port.name}}
  typedef {{port.tType}} {{port.name}}_output_transaction_t;
  {{port.name}}_output_transaction_t {{port.name}}_output_transaction;
  // Code for sending output transaction out through {{port.name}}
  // {{port.name}}.write({{port.name}}_output_transaction);
{% endfor %}

  // pragma uvmf custom class_item_additional begin
  // pragma uvmf custom class_item_additional end

  // FUNCTION: new
  function new(string name, uvm_component parent);
     super.new(name,parent);

     file = $fopen({name,".samples"},"w");
     if ( file == 0) `uvm_fatal("FOPEN_ERROR", $psprintf("Error opening file: %s", {name,".samples"}))

{% for DPIImport in DPIImports %}{% if DPIImport.name.endswith('_initialize') %}
     objhandle = {{DPIImport.name}}(objhandle);
{% endif %}{% endfor %}

  endfunction

  // FUNCTION: build_phase
  virtual function void build_phase (uvm_phase phase);
{% for export in exports %}
    {{export.name}} = new("{{export.name}}", this);
{% endfor %}
{% for export in qvip_exports %}
    {{export.name}} = new("{{export.name}}", this);
{% endfor %}
{% for port in ports %}
    {{port.name}} =new("{{port.name}}", this );
{% endfor %}
  endfunction

{% for export in exports %}
  // FUNCTION: write_{{export.name}}
  // Transactions received through {{export.name}} initiate the execution of this function.
  // This function performs prediction of DUT output values based on DUT input, configuration and state
  virtual function void write_{{export.name}}({{export.tType}} t);
    // pragma uvmf custom {{export.name}}_predictor begin
    `uvm_info("PRED", "Transaction Received through {{export.name}}", UVM_MEDIUM)
    `uvm_info("PRED", {"            Data: ",t.convert2string()}, UVM_FULL)
{% if ports|length > 0 %}
    // Construct one of each output transaction type.
{% endif %}
{% for port in ports %}
    {{port.name}}_output_transaction = {{port.name}}_output_transaction_t::type_id::create("{{port.name}}_output_transaction");
{% endfor %}

{% for port in ports %}
{% for DPIImport in DPIImports %}
{% if DPIImport.name.endswith('_output') %}
    // Calling output C function
    {{DPIImport.name}}(
{%- for argument in DPIImport.arguments -%}
{% if argument['unpacked_dimension'] and argument['unpacked_dimension'] -%}
   {% if argument['dir']=='input' %}
   {{'    {'}}{% for i in range(argument['unpacked_dimension']|replace("]","")|replace("[","")|int) %}
 t.{{argument['name']}}_{{i}}{% if not loop.last -%},{% else %}{{'}'}}{% endif %}
   {% endfor -%}
   
   {% else %}       {{argument['name']}}{% endif %}
{% else %}
   {% if argument['dir']=='input' -%}
        {% if argument['name'] != 'objhandle'%}
    t.{% endif %}{{argument['name']}}{% else %}
    {{port.name}}_output_transaction.{{argument['name']}}{% endif -%}{% endif -%}{% if not loop.last -%},
{% endif -%}{% endfor %}

       );
{% endif %}
{% endfor -%} 
{% endfor -%}

{% for port in ports %}
{% for DPIImport in DPIImports %}
{% if DPIImport.name.endswith('_update') %}
    
    // Calling update C function
    {{DPIImport.name}}(
{%- for argument in DPIImport.arguments -%}
{% if argument['unpacked_dimension'] and argument['unpacked_dimension'] -%}
   {% if argument['dir']=='input' %}
   {{'    {'}}{% for i in range(argument['unpacked_dimension']|replace("]","")|replace("[","")|int) %}
 t.{{argument['name']}}_{{i}}{% if not loop.last -%},{% else %}{{'}'}}{% endif %}
   {% endfor -%}
   
   {% else %}       {{argument['name']}}{% endif %}
{% else %}
   {% if argument['dir']=='input' -%}
        {% if argument['name'] != 'objhandle'%}
    t.{% endif %}{{argument['name']}}{% else %}
    {{port.name}}_output_transaction.{{argument['name']}}{% endif -%}{% endif -%}{% if not loop.last -%},
{% endif -%}{% endfor %}

       );
{% endif %}
{% endfor -%} 
{% endfor -%}

{% for port in ports -%}
{% for DPIImport in DPIImports -%}
{% for argument in DPIImport.arguments -%}
{% if argument['unpacked_dimension'] and argument['dir'] != 'input' -%}
    // Entries = {{argument['unpacked_dimension']}}
    {% for i in range(argument['unpacked_dimension']|replace("]","")|replace("[","")|int) -%}
    {{port.name}}_output_transaction.{{argument['name']}}_{{i}}  = {{argument['name']}}[{{i}}];
    {% endfor -%}
{% endif -%}
{% endfor -%}
{% endfor -%}
{% endfor -%} 

{% for port in ports %}
    // Code for sending output transaction out through {{port.name}}
    {{port.name}}.write({{port.name}}_output_transaction);
{% endfor %}

    if ( enable_predictor_fwrite) begin
{% for port in ports %}
{% for DPIImport in DPIImports %}
{% if DPIImport.name.endswith('_output') %}
       $fwrite(file,"{%- for argument in DPIImport.arguments -%}{% if argument['dir'] != 'input' -%}{% if argument['unpacked_dimension'] %}{% for i in range(argument['unpacked_dimension']|replace("]","")|replace("[","")|int) -%}%d{% if not loop.last %}, {% endif %}{% endfor %}{% else %}%d{% endif %}{% if not loop.last %}, {% endif %}{% endif %}{% endfor -%}\n",
    {%- for argument in DPIImport.arguments -%}{% if argument['dir'] != 'input' -%}{% if argument['unpacked_dimension'] %}{% for i in range(argument['unpacked_dimension']|replace("]","")|replace("[","")|int) -%}{{port.name}}_output_transaction.{{argument['name']}}_{{i}}{% if not loop.last %}, {% endif %}{% endfor %}{% else %}{{port.name}}_output_transaction.{{argument['name']}}{% endif %}{% if not loop.last %}, {% endif %}{% endif %}{% endfor -%});
{% endif %}
{% endfor %}
{% endfor %}
    end

    // pragma uvmf custom {{export.name}}_predictor end
  endfunction

{% endfor %}

  // FUNCTION: extract_phase
  virtual function void extract_phase (uvm_phase phase);
    super.extract_phase(phase);
{% for DPIImport in DPIImports %}{% if DPIImport.name.endswith('_terminate') %}
    {{DPIImport.name}}(objhandle);
{% endif %}{% endfor %}
    $fclose(file);
  endfunction
  
endclass 

// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}

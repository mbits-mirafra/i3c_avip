{% set fname = "{{bench_location}}/{{name}}/tb/testbench/hdl_top_mtlb.sv" %}
{% set conditional = "mtlbReady" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
// Generated for MTLB flow
//
//----------------------------------------------------------------------                     
//               
// Description: This top level module instantiates all synthesizable
//    static content.  This and tb_top.sv are the two top level modules
//    of the simulation.  
//
//    This module instantiates the following:
//        DUT: The Design Under Test
//        Interfaces:  Signal bundles that contain signals connected to DUT
//        Driver BFM's: BFM's that actively drive interface signals
//        Monitor BFM's: BFM's that passively monitor interface signals
//
//----------------------------------------------------------------------

{% endblock %}

{% block contents %}

module hdl_top;

import {{name}}_parameters_pkg::*;
{% for agent in qvip_bfm_pkgs %}
import {{agent}}_params_pkg::*;
{% endfor %}
import uvmf_base_pkg_hdl::*;

{% if veloceReady %}
  // pragma attribute hdl_top partition_module_xrtl                                            
{% endif %}
{% for qvip_hdl in qvip_hdl_modules %}
  hdl_{{qvip_hdl.envPkg}} 
      #(
{% for agent_name in qvip_hdl.agent_names %}
        .{{agent_name}}_ACTIVE(1),
{% endfor %}
        .UNIQUE_ID("{{qvip_hdl.unique_id}}")
        /*.EXT_CLK_RESET(0)*/ 
       ) {{qvip_hdl.unique_id_with_underscores}}qvip_hdl();

{% endfor %}
{% if useCoEmuClkRstGen %}
  wire rst;
  wire clk;
  clock_bfm #(INIT_CLOCK_HALF_PERIOD) clk_if_h(clk);
  sync_reset_bfm #(RST_POLARITY,
                   INITIAL_IDLE_CYCLES,
                   RESET_ACTIVE_CYCLES) rst_if_h(clk, rst);
{% else %}
// pragma uvmf custom clock_generator begin
  bit clk;
  // Instantiate a clk driver 
{% if veloceReady %}
  // tbx clkgen
{% endif %}
  initial begin
    clk = 0;
    #{{ clockPhaseOffset }};
    forever begin
      clk = ~clk;
      #{{ clockHalfPeriod }};
    end
  end
// pragma uvmf custom clock_generator end

// pragma uvmf custom reset_generator begin
  bit rst;
  // Instantiate a rst driver
{% if veloceReady %}
  // tbx clkgen
{% endif %}
  initial begin
    rst = {% if resetAssertionLevel %}1{% else %}0{% endif %}; 
    #{{ resetDuration }};
    rst =  {% if resetAssertionLevel %}0{% else %}1{% endif %}; 
  end
// pragma uvmf custom reset_generator end
{% endif %}

  // pragma uvmf custom module_item_additional begin
  // pragma uvmf custom module_item_additional end

  // Instantiate the signal bundle, monitor bfm and driver bfm for each interface.
  // The signal bundle, _if, contains signals to be connected to the DUT.
  // The monitor, monitor_bfm, observes the bus, _if, and captures transactions.
  // The driver, driver_bfm, drives transactions onto the bus, _if.
{% for bfm in bfms %}
  assign DUT.{{bfm.name}}_bus.{{bfm.clk}} = clk;
  assign DUT.{{bfm.name}}_bus.{{bfm.rst}} = rst;
  bind DUT {{bfm.ifPkg}}_if {{macro.paramUseNested(bfm.parameters)|indent(8)}} {{bfm.name}}_bus(
     // pragma uvmf custom {{bfm.name}}_bus_connections begin
     .{{bfm.clk}}({{bfm.clk}}), 
     .{{bfm.rst}}({{bfm.rst}}),
{% for port in bfm.portList %}     .{{port.name}}({{port.name}}){% if not loop.last %},
{% endif %}
{% endfor %}

     // pragma uvmf custom {{bfm.name}}_bus_connections end
     );
{% endfor %}
{% for bfm in bfms %}
  {{bfm.ifPkg}}_monitor_bfm {{macro.paramUseNested(bfm.parameters)|indent(8)}} {{bfm.name}}_mon_bfm(DUT.{{bfm.name}}_bus.monitor_port);
{% endfor %}
{% for bfm in bfms %}
{% if  bfm.activity == 'ACTIVE' %}
  {{bfm.ifPkg}}_driver_bfm {{macro.paramUseNested(bfm.parameters)|indent(8)}} {{bfm.name}}_drv_bfm(DUT.{{bfm.name}}_bus{% if bfm.initResp == "INITIATOR" %}.initiator_port{% else %}.responder_port{% endif %});
{% endif %}
{% endfor %}

  // pragma uvmf custom dut_instantiation begin
   {{name}} DUT ();
  // MOVE DUT CONNECTIONS FROM BOTTOM OF FILE TO THIS LOCATION
  // );
  // pragma uvmf custom dut_instantiation end

  initial begin  {% if veloceReady %}    // tbx vif_binding_block 
{% endif %}
    import uvm_pkg::uvm_config_db;
{% if useDpiLink %}
{% else %}
    // The monitor_bfm and driver_bfm for each interface is placed into the uvm_config_db.
    // They are placed into the uvm_config_db using the string names defined in the parameters package.
    // The string names are passed to the agent configurations by test_top through the top level configuration.
    // They are retrieved by the agents configuration class for use by the agent.
{% for bfm in bfms %}
    uvm_config_db #( virtual {{bfm.ifPkg}}_monitor_bfm {{macro.paramUseNested(bfm.parameters)|indent(8)}} )::set( null , UVMF_VIRTUAL_INTERFACES , {{bfm.name}}_BFM , {{bfm.name}}_mon_bfm ); 
{% endfor %}
{% for bfm in bfms %}
{% if  bfm.activity == 'ACTIVE' %}
    uvm_config_db #( virtual {{bfm.ifPkg}}_driver_bfm {{macro.paramUseNested(bfm.parameters)|indent(8)}} )::set( null , UVMF_VIRTUAL_INTERFACES , {{bfm.name}}_BFM , {{bfm.name}}_drv_bfm  );
{% endif %}
{% endfor %}
{% endif %}
{% if useCoEmuClkRstGen %}
    uvm_config_db #(virtual clock_bfm #(INIT_CLOCK_HALF_PERIOD))::set(null, UVMF_VIRTUAL_INTERFACES, CLOCK_CONTROLLER, clk_if_h);
    uvm_config_db #(virtual sync_reset_bfm #(RST_POLARITY, INITIAL_IDLE_CYCLES, RESET_ACTIVE_CYCLES))::set(null, UVMF_VIRTUAL_INTERFACES, RESET_CONTROLLER, rst_if_h);
{% endif %}
  end

endmodule

// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}

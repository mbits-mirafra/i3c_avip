{% set fname = "{{vip_location}}/{{interface_location}}/{{name}}_pkg/{{src_dir}}{{name}}_driver.svh" %}
{% extends "base_template.TMPL" %}

{% block description %}
//----------------------------------------------------------------------
//     
// DESCRIPTION: This class passes transactions between the sequencer
//        and the BFM driver interface.  It accesses the driver BFM 
//        through the bfm handle. This driver
//        passes transactions to the driver BFM through the access
//        task.  
//
//----------------------------------------------------------------------
{% endblock %}

{% block contents %}
class {{name}}_driver  {{macro.paramDeclare(paramDefs)|indent(6)}} extends uvmf_driver_base #(
                   .CONFIG_T({{name}}_configuration  {{macro.paramUse(paramDefs)|indent(29)}} ),
                   .BFM_BIND_T({% if useDpiLink %}{{name}}_driver_proxy {% else %}virtual {{name}}_driver_bfm {% endif %} {{macro.paramUse(paramDefs)|indent(29)}} ),
                   .REQ({{name}}_transaction  {{macro.paramUse(paramDefs)|indent(29)}} ),
                   .RSP({{name}}_transaction  {{macro.paramUse(paramDefs)|indent(29)}} ));

{{macro.compUtils([ name,'_driver']|join(""),paramDefs)}}
{% if veloceReady %}
//*******************************************************************
// Macros that define structs located in {{name}}_macros.svh
//*******************************************************************
// Initiator macro used by {{name}}_driver and {{name}}_driver_bfm
// to communicate initiator driven data to {{name}}_driver_bfm.           
`{{name}}_INITIATOR_STRUCT
  {{name}}_initiator_s {{name}}_initiator_struct;
//*******************************************************************
// Responder macro used by {{name}}_driver and {{name}}_driver_bfm
// to communicate Responder driven data to {{name}}_driver_bfm.
`{{name}}_RESPONDER_STRUCT
  {{name}}_responder_s {{name}}_responder_struct;
{% endif %}

// pragma uvmf custom class_item_additional begin
// pragma uvmf custom class_item_additional end

// ****************************************************************************
// This function is the standard SystemVerilog constructor.
//
  function new( string name = "", uvm_component parent=null );
    super.new( name, parent );
  endfunction

// ****************************************************************************
// This function sends configuration object variables to the driver BFM 
// using the configuration struct.
//
  virtual function void configure(input CONFIG_T cfg);
{% if veloceReady %}
      bfm.configure( cfg.to_struct() );
{% else %}
      bfm.configure( cfg );
{% endif %}
  endfunction

// ****************************************************************************
// This function places a handle to this class in the proxy variable in the
// driver BFM.  This allows the driver BFM to call tasks and function within this class.
//
  virtual function void set_bfm_proxy_handle();
    {%if not useDpiLink %}bfm.proxy = this;{% endif %}
  endfunction

// **************************************************************************** 
// This task is called by the run_phase in uvmf_driver_base.              
  virtual task access( inout REQ txn );
// pragma uvmf custom access begin
    if (configuration.initiator_responder==RESPONDER) begin
      // Complete current transfer and wait for next transfer
{% if veloceReady %}
      bfm.respond_and_wait_for_next_transfer( 
          {{name}}_initiator_struct, 
          txn.to_responder_struct() 
          );
      // Unpack information about initiated transfer received by this responder
      txn.from_initiator_struct({{name}}_initiator_struct);
{% else %}
      bfm.respond_and_wait_for_next_transfer( txn );
{% endif %}
    end else begin    
      // Initiate a transfer and get response
{% if veloceReady %}
      bfm.initiate_and_get_response( 
          txn.to_initiator_struct(), 
          {{name}}_responder_struct 
          );
      // Unpack transfer response information received by this initiator
      txn.from_responder_struct({{name}}_responder_struct);
{% else %}
      bfm.initiate_and_get_response( txn );
{% endif %}
    end
// pragma uvmf custom access end
  endtask

endclass

// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}

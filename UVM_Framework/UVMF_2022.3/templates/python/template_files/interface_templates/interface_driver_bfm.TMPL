{% set fname = "{{vip_location}}/{{interface_location}}/{{name}}_pkg/{{src_dir}}{{name}}_driver_bfm.sv" %}
{% extends "base_template.TMPL" %}

{% block description %}
//----------------------------------------------------------------------
//     
// DESCRIPTION: 
//    This interface performs the {{name}} signal driving.  It is
//     accessed by the uvm {{name}} driver through a virtual interface
//     handle in the {{name}} configuration.  It drives the singals passed
//     in through the port connection named bus of type {{name}}_if.
//
//     Input signals from the {{name}}_if are assigned to an internal input
//     signal with a _i suffix.  The _i signal should be used for sampling.
//
//     The input signal connections are as follows:
//       bus.signal -> signal_i 
//
//     This bfm drives signals with a _o suffix.  These signals
//     are driven onto signals within {{name}}_if based on INITIATOR/RESPONDER and/or
//     ARBITRATION/GRANT status.  
//
//     The output signal connections are as follows:
//        signal_o -> bus.signal
//
//                                                                                           
//      Interface functions and tasks used by UVM components:
//
//             configure:
//                   This function gets configuration attributes from the
//                   UVM driver to set any required BFM configuration
//                   variables such as 'initiator_responder'.                                       
//                                                                                           
//             initiate_and_get_response:
//                   This task is used to perform signaling activity for initiating
//                   a protocol transfer.  The task initiates the transfer, using
//                   input data from the initiator struct.  Then the task captures
//                   response data, placing the data into the response struct.
//                   The response struct is returned to the driver class.
//
//             respond_and_wait_for_next_transfer:
//                   This task is used to complete a current transfer as a responder
//                   and then wait for the initiator to start the next transfer.
//                   The task uses data in the responder struct to drive protocol
//                   signals to complete the transfer.  The task then waits for 
//                   the next transfer.  Once the next transfer begins, data from
//                   the initiator is placed into the initiator struct and sent
//                   to the responder sequence for processing to determine 
//                   what data to respond with.
//
//----------------------------------------------------------------------
{% endblock %}

{% block contents %}
import uvmf_base_pkg_hdl::*;
import {{name}}_pkg_hdl::*;
{% if veloceReady %}
`include "{{src_dir}}{{name}}_macros.svh"
{% else %}
import {{name}}_pkg::*;
{% endif %}

{%if useDpiLink %}module{% else %}interface{% endif %} {{name}}_driver_bfm {{macro.paramDeclare(paramDefs)|indent(2)}}
  ({{name}}_if bus);
{% if veloceReady %}
  // The following pragma and additional ones in-lined further below are for running this BFM on Veloce
  // pragma attribute {{name}}_driver_bfm partition_interface_xif
{% endif %}

`ifndef XRTL
// This code is to aid in debugging parameter mismatches between the BFM and its corresponding agent.
// Enable this debug by setting UVM_VERBOSITY to UVM_DEBUG
// Setting UVM_VERBOSITY to UVM_DEBUG causes all BFM's and all agents to display their parameter settings.
// All of the messages from this feature have a UVM messaging id value of "CFG"
// The transcript or run.log can be parsed to ensure BFM parameter settings match its corresponding agents parameter settings.
import uvm_pkg::*;
`include "uvm_macros.svh"
initial begin : bfm_vs_agent_parameter_debug
  `uvm_info("CFG", 
      $psprintf("The BFM at '%m' has the following parameters: {% for param in paramDefs %}{{param.name}}=%x {% endfor %}", {% for param in paramDefs %}{{param.name}}{% if not loop.last %},{% endif %}{% endfor %}),
      UVM_DEBUG)
end
`endif

{%if useDpiLink %}
  export "DPI-C" function configure;
  export "DPI-C" task     bfm_access; 
  export "DPI-C" task     response;
  export "DPI-C" function do_response_ready;
{% endif %}
  // Config value to determine if this is an initiator or a responder 
  uvmf_initiator_responder_t initiator_responder;
  // Custom configuration variables.  
  // These are set using the configure function which is called during the UVM connect_phase
{% for config in configVars %}
  {{config.type}} {{config.name}} {{config.unpackedDim}};
{% endfor %}

  tri {{clock}}_i;
  tri {{reset}}_i;

  // Signal list (all signals are capable of being inputs and outputs for the sake
  // of supporting both INITIATOR and RESPONDER mode operation. Expectation is that 
  // directionality in the config file was from the point-of-view of the INITIATOR

  // INITIATOR mode input signals
{% for sig in inputPorts %}
  tri {{sig.vector}} {{sig.name}}_i;
  reg {{sig.vector}} {{sig.name}}_o = {{sig.rstValue}};
{% endfor %}

  // INITIATOR mode output signals
{% for sig in outputPorts %}
  tri {{sig.vector}} {{sig.name}}_i;
  reg {{sig.vector}} {{sig.name}}_o = {{sig.rstValue}};
{% endfor %}

  // Bi-directional signals
{% for sig in inoutPorts %}
  tri {{sig.vector}} {{sig.name}}_i;
  reg {{sig.vector}} {{sig.name}}_o = {{sig.rstValue}};
{% endfor %}  

  assign {{clock}}_i = bus.{{clock}};
  assign {{reset}}_i = bus.{{reset}};

  // These are signals marked as 'input' by the config file, but the signals will be
  // driven by this BFM if put into RESPONDER mode (flipping all signal directions around)
{% for sig in inputPorts %}
  assign {{sig.name}}_i = bus.{{sig.name}};
  assign bus.{{sig.name}} = (initiator_responder == RESPONDER) ? {{sig.name}}_o : 'bz;
{% endfor %}

{% for sig in inoutPorts %}
  assign     {{sig.name}}_i = bus.{{sig.name}};
{% endfor %}

  // These are signals marked as 'output' by the config file, but the outputs will
  // not be driven by this BFM unless placed in INITIATOR mode.
{% for sig in outputPorts %}
  assign bus.{{sig.name}} = (initiator_responder == INITIATOR) ? {{sig.name}}_o : 'bz;
  assign {{sig.name}}_i = bus.{{sig.name}};
{% endfor %}
{% for sig in inoutPorts %}
  assign bus.{{sig.name}} = {{sig.name}}_o;
{% endfor %}

  // Proxy handle to UVM driver
  {{name}}_pkg::{{name}}_driver {{macro.paramUse(paramDefs)|indent(4)}}  proxy;
{% if veloceReady %}
  // pragma tbx oneway proxy.my_function_name_in_uvm_driver                 
{% endif %}

{% if veloceReady %}
  // ****************************************************************************
  // **************************************************************************** 
  // Macros that define structs located in {{name}}_macros.svh
  // ****************************************************************************
  // Struct for passing configuration data from {{name}}_driver to this BFM
  // ****************************************************************************
  `{{name}}_CONFIGURATION_STRUCT
  // ****************************************************************************
  // Structs for INITIATOR and RESPONDER data flow
  //*******************************************************************
  // Initiator macro used by {{name}}_driver and {{name}}_driver_bfm
  // to communicate initiator driven data to {{name}}_driver_bfm.           
  `{{name}}_INITIATOR_STRUCT
    {{name}}_initiator_s initiator_struct;
  // Responder macro used by {{name}}_driver and {{name}}_driver_bfm
  // to communicate Responder driven data to {{name}}_driver_bfm.
  `{{name}}_RESPONDER_STRUCT
    {{name}}_responder_s responder_struct;
{% endif %}

  // ****************************************************************************
// pragma uvmf custom reset_condition_and_response begin
  // Always block used to return signals to reset value upon assertion of reset
  always @( {% if resetAssertionLevel %}posedge{% else %}negedge{% endif %} {{reset}}_i )
     begin
       // RESPONDER mode output signals
{% for sig in inputPorts %}
       {{sig.name}}_o <= {{sig.rstValue}};
{% endfor %}
       // INITIATOR mode output signals
{% for sig in outputPorts %}
       {{sig.name}}_o <= {{sig.rstValue}};
{% endfor %}
       // Bi-directional signals
{% for sig in inoutPorts %}
       {{sig.name}}_o <= {{sig.rstValue}};
{% endfor %} 
     end    
// pragma uvmf custom reset_condition_and_response end

  // pragma uvmf custom interface_item_additional begin
  // pragma uvmf custom interface_item_additional end

  //******************************************************************
  // The configure() function is used to pass agent configuration
  // variables to the driver BFM.  It is called by the driver within
  // the agent at the beginning of the simulation.  It may be called 
  // during the simulation if agent configuration variables are updated
  // and the driver BFM needs to be aware of the new configuration 
  // variables.
  //

{% if useDpiLink %}
  function void configure( input c_bit_array_t bit_vec_in);                       
    uvmf_active_passive_t act_pass;
    uvmf_initiator_responder_t init_resp;
{% for config in configVars %}
    {{config.type}} {{config.name}};
{% endfor %}
    {
    act_pass,
    init_resp{% if configVars|length > 0 %},{% endif %}
{% for config in configVars %}     {{config.name}}{% if loop.last %}}{% else %},{% endif %}
{% endfor %}
    } = bit_vec_in;
{% else %}
{% if veloceReady %}
  function void configure({{name}}_configuration_s {{name}}_configuration_arg); // pragma tbx xtf  
{% else %}
  function void configure({{name}}_configuration 
                         {{macro.paramList(paramDefs,"                         ")}}
                         {{name}}_configuration_arg
                         );  
{% endif %}
    initiator_responder = {{name}}_configuration_arg.initiator_responder;
{% for config in configVars %}
    {{config.name}} = {{name}}_configuration_arg.{{config.name}};
{% endfor %}
{% endif %}
  // pragma uvmf custom configure begin
  // pragma uvmf custom configure end
  endfunction                                                                             

// pragma uvmf custom initiate_and_get_response begin
// ****************************************************************************
// UVMF_CHANGE_ME
{% if veloceReady %}
// This task is used by an initator.  The task first initiates a transfer then
// waits for the responder to complete the transfer.
    task initiate_and_get_response( 
       // This argument passes transaction variables used by an initiator
       // to perform the initial part of a protocol transfer.  The values
       // come from a sequence item created in a sequence.
       input {{name}}_initiator_s {{name}}_initiator_struct, 
       // This argument is used to send data received from the responder
       // back to the sequence item.  The sequence item is returned to the sequence.
       output {{name}}_responder_s {{name}}_responder_struct 
       );{% if veloceReady %}// pragma tbx xtf {% endif %} 
       // 
       // Members within the {{name}}_initiator_struct:
{% for txn in transVars %}
       //   {{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}
       // Members within the {{name}}_responder_struct:
{% for txn in transVars %}
       //   {{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}
       initiator_struct = {{name}}_initiator_struct;
       //
       // Reference code;
       //    How to wait for signal value
       //      while (control_signal == 1'b1) @(posedge {{clock}}_i);
       //    
       //    How to assign a responder struct member, named xyz, from a signal.   
       //    All available initiator input and inout signals listed.
       //    Initiator input signals
{% for sig in inputPorts %}
       //      {{name}}_responder_struct.xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}
       //    Initiator inout signals
{% for sig in inoutPorts %}
       //      {{name}}_responder_struct.xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}
       //    How to assign a signal from an initiator struct member named xyz.   
       //    All available initiator output and inout signals listed.
       //    Notice the _o.  Those are storage variables that allow for procedural assignment.
       //    Initiator output signals
{% for sig in outputPorts %}
       //      {{sig.name}}_o <= {{name}}_initiator_struct.xyz;  //    {{sig.vector}} 
{% endfor %}
       //    Initiator inout signals
{% for sig in inoutPorts %}
       //      {{sig.name}}_o <= {{name}}_initiator_struct.xyz;  //    {{sig.vector}} 
{% endfor %}
{% else %}
// This task is used by an initator.  The task first initiates a transfer then
// waits for the responder to complete the transfer.
    task initiate_and_get_response( {{name}}_transaction 
                                  {{macro.paramList(paramDefs,"                                  ")}}
                                  initiator_trans  
                                  );
       // 
       // Variables within the initiator_trans:
{% for txn in transVars %}
       //   {{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}
       //
       // Reference code;
       //    How to wait for signal value
       //      while (control_signal == 1'b1) @(posedge {{clock}}_i);
       //    
       //    How to assign a initiator_trans variable, named xyz, from a signal.   
       //    All available initiator input and inout signals listed.
       //    Initiator input signals:
{% for sig in inputPorts %}
       //      initiator_trans.xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}
       //    Initiator inout signals:
{% for sig in inoutPorts %}
       //      initiator_trans.xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}
       //    How to assign a signal, named xyz, from a initiator_trans varaiable.   
       //    All available initiator output and inout signals listed.
       //    Notice the _o.  Those are storage variables that allow for procedural assignment.
       //    Initiator output signals:
{% for sig in outputPorts %}
       //      {{sig.name}}_o <= initiator_trans.xyz;  //    {{sig.vector}} 
{% endfor %}
       //    Initiator inout signals:
{% for sig in inoutPorts %}
       //      {{sig.name}}_o <= initiator_trans.xyz;  //    {{sig.vector}} 
{% endfor %}
{% endif %}
    // Initiate a transfer using the data received.
    @(posedge {{clock}}_i);
    @(posedge {{clock}}_i);
    // Wait for the responder to complete the transfer then place the responder data into 
{% if veloceReady %}
    // {{name}}_responder_struct.
{% else %}
    // initiator_trans.
{% endif %}
    @(posedge {{clock}}_i);
    @(posedge {{clock}}_i);
{% if veloceReady %}
    responder_struct = {{name}}_responder_struct;
{% endif %}
  endtask        
// pragma uvmf custom initiate_and_get_response end

// pragma uvmf custom respond_and_wait_for_next_transfer begin
// ****************************************************************************
// The first_transfer variable is used to prevent completing a transfer in the 
// first call to this task.  For the first call to this task, there is not
// current transfer to complete.
bit first_transfer=1;

// UVMF_CHANGE_ME
// This task is used by a responder.  The task first completes the current 
// transfer in progress then waits for the initiator to start the next transfer.
{% if veloceReady %}
  task respond_and_wait_for_next_transfer( 
       // This argument is used to send data received from the initiator
       // back to the sequence item.  The sequence determines how to respond.
       output {{name}}_initiator_s {{name}}_initiator_struct, 
       // This argument passes transaction variables used by a responder
       // to complete a protocol transfer.  The values come from a sequence item.       
       input {{name}}_responder_s {{name}}_responder_struct 
       );{% if veloceReady %}// pragma tbx xtf {% endif %}  
  // Variables within the {{name}}_initiator_struct:
{% for txn in transVars %}
  //   {{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}
  // Variables within the {{name}}_responder_struct:
{% for txn in transVars %}
  //   {{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}
       // Reference code;
       //    How to wait for signal value
       //      while (control_signal == 1'b1) @(posedge {{clock}}_i);
       //    
       //    How to assign a responder struct member, named xyz, from a signal.   
       //    All available responder input and inout signals listed.
       //    Responder input signals
{% for sig in outputPorts %}
       //      {{name}}_responder_struct.xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}
       //    Responder inout signals
{% for sig in inoutPorts %}
       //      {{name}}_responder_struct.xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}
       //    How to assign a signal, named xyz, from an initiator struct member.   
       //    All available responder output and inout signals listed.
       //    Notice the _o.  Those are storage variables that allow for procedural assignment.
       //    Responder output signals
{% for sig in inputPorts %}
       //      {{sig.name}}_o <= {{name}}_initiator_struct.xyz;  //    {{sig.vector}} 
{% endfor %}
       //    Responder inout signals
{% for sig in inoutPorts %}
       //      {{sig.name}}_o <= {{name}}_initiator_struct.xyz;  //    {{sig.vector}} 
{% endfor %}    
{% else %}  
  task respond_and_wait_for_next_transfer( {{name}}_transaction 
                                         {{macro.paramList(paramDefs,"                                         ")}}
                                         responder_trans  
                                         );     
  // Variables within the responder_trans:
{% for txn in transVars %}
  //   {{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}
       // Reference code;
       //    How to wait for signal value
       //      while (control_signal == 1'b1) @(posedge {{clock}}_i);
       //    
       //    How to assign a responder_trans member, named xyz, from a signal.   
       //    All available responder input and inout signals listed.
       //    Responder input signals
{% for sig in outputPorts %}
       //      responder_trans.xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}
       //    Responder inout signals
{% for sig in inoutPorts %}
       //      responder_trans.xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}
       //    How to assign a signal from a responder_trans member named xyz.   
       //    All available responder output and inout signals listed.
       //    Notice the _o.  Those are storage variables that allow for procedural assignment.
       ///   Responder output signals
{% for sig in inputPorts %}
       //      {{sig.name}}_o <= responder_trans.xyz;  //    {{sig.vector}} 
{% endfor %}
       //    Responder inout signals
{% for sig in inoutPorts %}
       //      {{sig.name}}_o <= responder_trans.xyz;  //    {{sig.vector}} 
{% endfor %}    

{% endif %}
  @(posedge {{clock}}_i);
  if (!first_transfer) begin
    // Perform transfer response here.   
{% if veloceReady %}
    // Reply using data recieved in the {{name}}_responder_struct.
{% else %}
    // Reply using data recieved in the responder_trans.
{% endif %}
    @(posedge {{clock}}_i);
    // Reply using data recieved in the transaction handle.
    @(posedge {{clock}}_i);
  end
    // Wait for next transfer then gather info from intiator about the transfer.
{% if veloceReady %}
    // Place the data into the {{name}}_initiator_struct.
{% else %}
    // Place the data into the responder_trans handle.
{% endif %}
    @(posedge {{clock}}_i);
    @(posedge {{clock}}_i);
    first_transfer = 0;
  endtask
// pragma uvmf custom respond_and_wait_for_next_transfer end

{% if useDpiLink %}
endmodule
{% else %} 
endinterface
{% endif %}

// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}

{% set fname = "{{vip_location}}/{{interface_location}}/{{name}}_pkg/{{src_dir}}{{name}}_driver_proxy.svh" %}
{% extends "base_template.TMPL" %}
{% set conditional = "dpi_link" %}
{% block description %}
//----------------------------------------------------------------------
//     
// DESCRIPTION: This class communicates with the driver BFM using the 
//      DPI link C routines.  Transaction variables are packed into a bit
//      stream that is used as arguments to the C routines.  This allows 
//      for generic C routines that can be used with any interface package
//      using DPI link for BFM communication.
//
//----------------------------------------------------------------------
{% endblock %}
{% block contents %}

class {{name}}_driver_proxy {%if paramDefs|length > 0%}      #(
{% for param in paramDefs %}      {{param.type}} {{param.name}}{% if param.value != None %} = {{param.value}}{% endif %}{% if not loop.last %},{% endif %}                                
{% endfor %}      )
{% endif %} extends dpi_link_proxy;
      {%if paramDefs|length > 0%}
      `uvm_object_param_utils({{name}}_driver_proxy{%if paramDefs|length > 0%} #({% for param in paramDefs %}.{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}{% endfor %}) {% endif %})
      {% else %}
      `uvm_object_utils({{name}})
      {% endif %}

      // pragma uvmf custom class_item_additional begin
      // pragma uvmf custom class_item_additional end

      protected function new(string name = "xrtl_path");
         super.new(name);
      endfunction

      `dpi_link_proxy_get({{name}}_driver_proxy{%if paramDefs|length > 0%} #({% for param in paramDefs %}.{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}{% endfor %}) {% endif %} )

      task access({% for txn in transVars %}            
            input {{txn.type}} {{txn.name}} {{txn.unpackedDim}}{% if not loop.last %},{% endif %}
{% endfor %}

            );
            c_bit_array_t c_{{name}}_bit_array;
            c_{{name}}_bit_array = { {% for txn in transVars %}{{txn.name}}{% if not loop.last %},{% endif %}{% endfor %}};
            C_access(get_xrtl_path(), c_{{name}}_bit_array);
            { {% for txn in transVars %}{{txn.name}}{% if not loop.last %},{% endif %}{% endfor %}} = c_{{name}}_bit_array;
      endtask

      task response({% for txn in transVars %}            
            inout {{txn.type}} {{txn.name}} {{txn.unpackedDim}}{% if not loop.last %},{% endif %}
{% endfor %}

            );
            c_bit_array_t c_{{name}}_bit_array;
            c_{{name}}_bit_array = { {% for txn in transVars %}{{txn.name}}{% if not loop.last %},{% endif %}{% endfor %}};
            C_response(get_xrtl_path(), c_{{name}}_bit_array);
            { {% for txn in transVars %}{{txn.name}}{% if not loop.last %},{% endif %}{% endfor %}} = c_{{name}}_bit_array;
      endtask

      function void configure(
            uvmf_active_passive_t act_pass,
            uvmf_initiator_responder_t   init_resp{% if configVars|length >0 %},{% endif %}
            {% for config in configVars %}

            {{config.type}} {{config.name}}{% if not loop.last %}, {% endif %}
{% endfor %}
            ); 
            c_bit_array_t c_{{name}}_bit_array;
            c_{{name}}_bit_array = {act_pass,init_resp{% if configVars|length >0 %},{% endif %}{% for config in configVars %}{{config.name}}{% if not loop.last %}, {% endif %}{% endfor %} };
            C_configure(get_xrtl_path(), c_{{name}}_bit_array);
            {act_pass,init_resp{% if configVars|length >0 %},{% endif %}{% for config in configVars %} {{config.name}}{% if not loop.last %}, {% endif %}{% endfor %}}= c_{{name}}_bit_array;
         endfunction
      
       function void do_response_ready( {% for txn in responseList %}
      input {{txn.type}} {{txn.name}} {{txn.unpackedDim}}{% if not loop.last %},
{% endif %}
{% endfor %}    );
             c_bit_array_t c_{{name}}_bit_array;
             {% if responseList|length >0 %} c_{{name}}_bit_array = { {% for txn in responseList %}{{txn.name}}{% if not loop.last %},{% endif %} 
{% endfor %}}; {% endif %}
C_do_response_ready( get_xrtl_path(), c_{{name}}_bit_array );
       endfunction
      
endclass


// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}

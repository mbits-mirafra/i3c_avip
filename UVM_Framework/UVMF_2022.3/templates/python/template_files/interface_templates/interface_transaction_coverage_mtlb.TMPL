{% set fname = "{{vip_location}}/{{interface_location}}/{{name}}_pkg/{{src_dir}}{{name}}_transaction_coverage_mtlb.svh" %}
{% set conditional = "mtlbReady" %}
{% extends "base_template.TMPL" %}

{% block description %}
// 
// Generated for MTLB flow
//
//----------------------------------------------------------------------
//     
// DESCRIPTION: This class records {{name}} transaction information using
//       a covergroup named {{name}}_transaction_cg.  An instance of this
//       coverage component is instantiated in the uvmf_parameterized_agent
//       if the has_coverage flag is set.
//
//----------------------------------------------------------------------
{% endblock %}

{% block contents %}
class {{name}}_transaction_coverage {{macro.paramDeclare(paramDefs)|indent(6)}} extends uvm_subscriber #(.T({{name}}_transaction {{macro.paramUse(paramDefs)|indent(44)}}));

{{macro.compUtils([name,'_transaction_coverage']|join(""),paramDefs)}}

  T coverage_trans;

  integer file;
  int     transactions_to_flush = 4000;
  int     transaction_count;

  // pragma uvmf custom class_item_additional begin
  // pragma uvmf custom class_item_additional end
  
  // ****************************************************************************
  // FUNCTION : new()
  // This function is the standard SystemVerilog constructor.
  //
  function new(string name="", uvm_component parent=null);
    super.new(name,parent);
    file = $fopen({name,".samples"},"w");
    if ( file == 0) `uvm_fatal("FOPEN_ERROR", $psprintf("Error opening file: %s", {name,".samples"}))
  endfunction


  // ****************************************************************************
  // FUNCTION: write (T t)
  // This function is automatically executed when a transaction arrives on the
  // analysis_export.  It copies values from the variables in the transaction 
  // to local variables used to collect functional coverage.  
  //
  virtual function void write (T t);
      if ( transaction_count <= transactions_to_flush ) begin
          transaction_count++;
      end else begin
         $fwrite(file,
         "{% for txn in transVars %}%d{% if not loop.last %},{% endif %}{% endfor %}\n",
          {% for txn in transVars %}t.{{txn.name}}{% if not loop.last %},{% endif %}{% endfor %} 
          );
      end
  endfunction

  // ****************************************************************************
  // FUNCTION : check_phase()
  // This function is the standard UVM build_phase.
  //
  function void check_phase(uvm_phase phase);
     super.check_phase(phase);
     $fclose(file);
  endfunction


endclass

// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}

# YAML structure that defines the 'mem' interface
uvmf:
  # All interfaces must live underneath the 'interfaces' structure
  interfaces:
    # Each interface must be given a unique name
    "mem":
      # The name of the clock & reset are the only required
      # elements for each interface
      clock: "clock"
      reset: "reset"
      # Reset assertion level specified as True will make this
      # interface sensitive to an active HIGH reset
      reset_assertion_level: "True"
      veloce_ready: "True"
      # Define parameters for this interface. All classes
      # associated with this interface will be parameterized
      # accordingly. If no 'value' entry is provided there will
      # be no default value for the parameter. 
      parameters:
        - name: "DATA_WIDTH"
          type: "int"
          value: "220"
        - name: "ADDR_WIDTH"
          type: "int"
          value: "210"
      # Package-level parameters. Will be defined in the HVL or HDL
      # file depending on where they are placed. 
      hvl_pkg_parameters:
        - name: "MEM_HVL_PKG_PARAMETER1"
          type: "integer"
          value: "21"
        - name: "MEM_HVL_PKG_PARAMETER2"
          type: "integer"
          value: "22"
      hdl_pkg_parameters:
        - name: "MEM_HDL_PKG_PARAMETER1"
          type: "byte"
          value: "27"
        - name: "MEM_HDL_PKG_PARAMETER2"
          type: "byte"
          value: "28"
      # Typedefs are also defined in the HDL or HVL package
      # depending on where they are placed
      hdl_typedefs:
        - name: "my_byte_t"
          type: "byte"       
        - name: "my_word_t"
          type: "bit [15:0] "
      hvl_typedefs:
        - name: "my_object_t"
          type: "uvm_object"
      # Specify the ports associated with this interface. The
      # direction is from the perspective of the INITIATOR or MASTER
      ports: 
        - name: "cs"   
          width: "1"        
          dir: "output"
          reset_value: "1'b0"
        - name: "rwn"  
          width: "1"         
          dir: "output"
          reset_value: "1'b1"
        - name: "rdy"  
          width: "1"       
          dir: "input"
          reset_value: "1'b0" 
        - name: "addr" 
          width: "ADDR_WIDTH" 
          dir: "output"
          reset_value: "'bz"
        - name: "wdata"
          width: "DATA_WIDTH" 
          dir: "output"
          reset_value: "'bz"
        - name: "rdata"
          width: "DATA_WIDTH" 
          dir: "input" 
      # Specify transaction variables associated with this interface's
      # desired sequence item. Each entry can be specified as random as well
      # as something to be used as part of the sequence item's compare 
      # function
      transaction_vars:
        - name: "read_data"  
          type: "bit [DATA_WIDTH-1:0]"
          isrand: "False"
          iscompare: "True" 
        - name: "write_data" 
          type: "bit [DATA_WIDTH-1:0]"
          isrand: "False"
          iscompare: "True" 
        - name: "address"    
          type: "bit [ADDR_WIDTH-1:0]"
          isrand: "True" 
          iscompare: "True" 
        - name: "byte_enable"
          type: "bit [3:0]"           
          isrand: "True" 
          iscompare: "False"
        - name: "chksum"     
          type: "int"                 
          isrand: "False"
          iscompare: "False"
      # Constraints within the sequence item to control random vars
      transaction_constraints:
        - name: "address_word_align_c"
          value: "{ address[1:0]==0; }"

      # Configuration variables
      config_vars:
        - name: "transfer_gap"
          type: "bit [3:0]"
          isrand: "True"
        - name: "speed_grade"
          type: "bit [3:0]"
          value: "35"
      # Constraint block(s) for random configuration variables
      config_constraints:
        - name: "valid_packet_gap_range_c"
          value: "{ transfer_gap inside {0, 2, 4, 8, 15}; }"
